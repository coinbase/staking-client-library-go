{
  "swagger": "2.0",
  "info": {
    "title": "Orchestration Service",
    "description": "Service that can power non-custodial staking experiences for your users.",
    "version": "v1"
  },
  "tags": [
    {
      "name": "Protocol",
      "description": "Protocols details"
    },
    {
      "name": "Network",
      "description": "Networks details"
    },
    {
      "name": "Action",
      "description": "Actions details"
    },
    {
      "name": "StakingTarget",
      "description": "Staking targets details"
    },
    {
      "name": "StakingContext",
      "description": "Staking context details"
    },
    {
      "name": "Workflow",
      "description": "Workflow management details"
    },
    {
      "name": "StakingService"
    }
  ],
  "host": "api.developer.coinbase.com",
  "basePath": "/staking",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/protocols": {
      "get": {
        "summary": "List supported protocols",
        "description": "List supported protocols",
        "operationId": "listProtocols",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ListProtocolsResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Protocol"
        ]
      }
    },
    "/v1/viewStakingContext:view": {
      "get": {
        "summary": "Returns point-in-time context of staking data for an address",
        "description": "Returns point-in-time context of staking data for an address",
        "operationId": "ViewStakingContext",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ViewStakingContextResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "The address to fetch staking context for.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "network",
            "description": "The network to fetch staking context for.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "ethereumKilnStakingContextParameters.integratorContractAddress",
            "description": "Integrator contract address.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "StakingContext"
        ]
      }
    },
    "/v1/workflows": {
      "get": {
        "summary": "List supported workflows",
        "operationId": "listWorkflows",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ListWorkflowsResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "description": "[AIP-160](https://google.aip.dev/160) filter\nSupported fields:\n- string action: \"stake\", \"unstake\"\n- string protocol: \"ethereum_kiln\"\n- string network: \"holesky\", \"mainnet\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of workflows to return. The service may\nreturn fewer than this value.\n\nIf unspecified, 100 workflows will be returned.\nThe maximum value is 1000; values over 1000 will be floored to 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A page token as part of the response of a previous call.\nProvide this to retrieve the next page.\n\nWhen paginating, all other parameters must match the previous\nrequest to list resources.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Workflow"
        ]
      },
      "post": {
        "summary": "Create workflow",
        "operationId": "createWorkflow",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Workflow"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workflow",
            "description": "The workflow to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Workflow",
              "required": [
                "workflow"
              ]
            }
          }
        ],
        "tags": [
          "Workflow"
        ]
      }
    },
    "/v1/{name}": {
      "get": {
        "summary": "Get workflow",
        "operationId": "getWorkflow",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Workflow"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The resource name of the workflow.\nFormat: workflows/{workflow}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "workflows/[^/]+"
          }
        ],
        "tags": [
          "Workflow"
        ]
      }
    },
    "/v1/{name}/step": {
      "post": {
        "summary": "Perform the next step in a workflow",
        "description": "Perform the next step in a workflow",
        "operationId": "updateWorkflow",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Workflow"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The resource name of the workflow.\nFormat: workflows/{workflow}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "workflows/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StakingServicePerformWorkflowStepBody"
            }
          }
        ],
        "tags": [
          "Workflow"
        ]
      }
    },
    "/v1/{parent}/actions": {
      "get": {
        "summary": "List supported actions",
        "description": "List supported actions",
        "operationId": "listActions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ListActionsResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe collection of actions.\nFormat: protocols/{protocol}/networks/{network}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "protocols/[^/]+/networks/[^/]+"
          }
        ],
        "tags": [
          "Action"
        ]
      }
    },
    "/v1/{parent}/networks": {
      "get": {
        "summary": "List supported networks",
        "description": "List supported networks",
        "operationId": "listNetworks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ListNetworksResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe collection of networks.\nFormat: protocols/{protocol}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "protocols/[^/]+"
          }
        ],
        "tags": [
          "Network"
        ]
      }
    },
    "/v1/{parent}/stakingTargets": {
      "get": {
        "summary": "List supported staking targets",
        "description": "List supported staking targets",
        "operationId": "listStakingTargets",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ListStakingTargetsResponse"
            }
          },
          "400": {
            "description": "The request attempted has invalid parameters",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Returned if authentication information is invalid",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when a user does not have permission to the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when a resource is not found.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Returned when a resource limit has been reached.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Returned when an internal server error happens.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe collection of staking targets.\nFormat: protocols/{protocol}/networks/{network}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "protocols/[^/]+/networks/[^/]+"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of staking targets to return. The service may\nreturn fewer than this value.\n\nIf unspecified, 100 staking targets will be returned.\nThe maximum value is 1000; values over 1000 will be floored to 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A page token as part of the response of a previous call.\nProvide this to retrieve the next page.\n\nWhen paginating, all other parameters must match the previous\nrequest to list resources.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "StakingTarget"
        ]
      }
    }
  },
  "definitions": {
    "StakeAccountBalanceState": {
      "type": "string",
      "enum": [
        "BALANCE_STATE_UNSPECIFIED",
        "BALANCE_STATE_INACTIVE",
        "BALANCE_STATE_ACTIVATING",
        "BALANCE_STATE_ACTIVE",
        "BALANCE_STATE_DEACTIVATING"
      ],
      "default": "BALANCE_STATE_UNSPECIFIED",
      "description": "Represents the different states a stake account balance can have.\nUsed to check to see if stake is actively earning rewards or ready to be withdrawn.\n\n - BALANCE_STATE_UNSPECIFIED: The balance is not known.\n - BALANCE_STATE_INACTIVE: The balance is not actively staking.\n - BALANCE_STATE_ACTIVATING: The balance is in a warm up period and will activate in the next epoch.\n - BALANCE_STATE_ACTIVE: The balance is actively staking and earning rewards.\n - BALANCE_STATE_DEACTIVATING: The balance is in a cool down period and will be deactivated in the next epoch."
    },
    "StakingServicePerformWorkflowStepBody": {
      "type": "object",
      "properties": {
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the step to be performed."
        },
        "data": {
          "type": "string",
          "description": "Transaction metadata. This is either the signed transaction or transaction hash depending on the workflow's broadcast method."
        }
      },
      "description": "The request message for PerformWorkflowStep.",
      "required": [
        "step",
        "data"
      ]
    },
    "WaitStepOutputWaitUnit": {
      "type": "string",
      "enum": [
        "WAIT_UNIT_UNSPECIFIED",
        "WAIT_UNIT_SECONDS",
        "WAIT_UNIT_BLOCKS",
        "WAIT_UNIT_EPOCHS",
        "WAIT_UNIT_CHECKPOINTS"
      ],
      "default": "WAIT_UNIT_UNSPECIFIED",
      "description": "The unit of wait time.\n\n - WAIT_UNIT_UNSPECIFIED: Unspecified wait time.\n - WAIT_UNIT_SECONDS: Wait time measured in seconds.\n - WAIT_UNIT_BLOCKS: Wait time measured in blocks.\n - WAIT_UNIT_EPOCHS: Wait time measured in epochs.\n - WAIT_UNIT_CHECKPOINTS: Wait time measured in checkpoints."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Action": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Action.\nFormat: protocols/{protocolName}/networks/{networkName}/actions/{actionName}\nEx: protocols/ethereum_kiln/networks/holesky/validators/stake"
        }
      },
      "description": "An Action resource represents an action you may take on a network (e.g. stake, unstake)."
    },
    "v1Amount": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The total value of the token."
        },
        "currency": {
          "type": "string",
          "description": "The currency of the token"
        }
      },
      "description": "The amount of a token you wish to perform an action\nwith."
    },
    "v1BulkTxStepOutput": {
      "type": "object",
      "properties": {
        "unsignedTxs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The unsigned transactions that must be signed and broadcasted.",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/v1BulkTxStepOutputState",
          "description": "The state of the bulk tx step.",
          "readOnly": true
        }
      },
      "description": "The details of multiple transactions being constructed and broadcasted to the network."
    },
    "v1BulkTxStepOutputState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_IN_PROGRESS",
        "STATE_FAILED",
        "STATE_COMPLETED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "State defines an enumeration of states for a staking transaction.\n\n - STATE_UNSPECIFIED: Unspecified transaction state.\n - STATE_IN_PROGRESS: Txs construction in progress.\n - STATE_FAILED: Tx construction failed.\n - STATE_COMPLETED: Tx construction completed."
    },
    "v1Contract": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Contract Address.\nFormat: protocols/{protocolName}/networks/{networkName}/stakingTargets/{contractName}\nEx: protocols/ethereum_kiln/networks/holesky/stakingTargets/0xA55416de5DE61A0AC1aa8970a280E04388B1dE4b"
        },
        "address": {
          "type": "string",
          "description": "The contract address you may submit actions to."
        }
      },
      "description": "A Contract resource, which represents an active contract\nfor the given protocol network which you can submit an action\nto."
    },
    "v1EthereumKilnClaimStakeParameters": {
      "type": "object",
      "properties": {
        "stakerAddress": {
          "type": "string",
          "description": "The address you wish to claim stake for."
        },
        "integratorContractAddress": {
          "type": "string",
          "title": "The address of the integrator contract"
        }
      },
      "description": "The parameters required for the claim stake action on Ethereum Kiln.",
      "title": "EthereumKiln: Claim Stake Parameters",
      "required": [
        "stakerAddress",
        "integratorContractAddress"
      ]
    },
    "v1EthereumKilnStakeParameters": {
      "type": "object",
      "properties": {
        "stakerAddress": {
          "type": "string",
          "description": "The address you wish to stake from."
        },
        "integratorContractAddress": {
          "type": "string",
          "description": "The address of the integrator contract."
        },
        "amount": {
          "$ref": "#/definitions/v1Amount",
          "description": "The amount of Ethereum to stake in wei."
        }
      },
      "description": "The parameters required for the stake action on Ethereum Kiln.",
      "title": "EthereumKiln: Stake Parameters",
      "required": [
        "stakerAddress",
        "integratorContractAddress",
        "amount"
      ]
    },
    "v1EthereumKilnStakingContextDetails": {
      "type": "object",
      "properties": {
        "ethereumBalance": {
          "$ref": "#/definitions/v1Amount",
          "description": "The Ethereum balance of the address.\nThis can be used to gate the stake action to make sure the requested stake amount\nis less than ethereum_balance."
        },
        "integratorShareBalance": {
          "$ref": "#/definitions/v1Amount",
          "description": "The number of integrator shares owned by the address."
        },
        "integratorShareUnderlyingBalance": {
          "$ref": "#/definitions/v1Amount",
          "title": "The total Ethereum you can exchange for your integrator shares.\nThis can be used to gate the unstake action to make sure the requested unstake amount\nis less than integrator_share_underlying_balance"
        },
        "totalExitableEth": {
          "$ref": "#/definitions/v1Amount",
          "description": "The total amount of Ethereum you can redeem for all non-claimed vPool shares.\nThis along with the condition total_shares_pending_exit == fulfillable_share_count\ncan be used to gate the claim_stake action."
        },
        "totalSharesPendingExit": {
          "$ref": "#/definitions/v1Amount",
          "description": "The number of vPool shares are eligible to receive now or at a later point in time."
        },
        "fulfillableShareCount": {
          "$ref": "#/definitions/v1Amount",
          "description": "The number of vPool shares you are able to claim now."
        }
      },
      "description": "The protocol specific details for an Ethereum Kiln staking context.",
      "title": "EthereumKiln: Staking context details"
    },
    "v1EthereumKilnStakingContextParameters": {
      "type": "object",
      "properties": {
        "integratorContractAddress": {
          "type": "string",
          "description": "Integrator contract address."
        }
      },
      "description": "The protocol specific parameters required for fetching a staking context.",
      "title": "EthereumKiln: Staking Context Parameters"
    },
    "v1EthereumKilnStakingParameters": {
      "type": "object",
      "properties": {
        "stakeParameters": {
          "$ref": "#/definitions/v1EthereumKilnStakeParameters",
          "description": "The parameters for stake action on Ethereum Kiln."
        },
        "unstakeParameters": {
          "$ref": "#/definitions/v1EthereumKilnUnstakeParameters",
          "description": "The parameters for unstake action on Ethereum Kiln."
        },
        "claimStakeParameters": {
          "$ref": "#/definitions/v1EthereumKilnClaimStakeParameters",
          "description": "The parameters for claim stake action on Ethereum Kiln."
        }
      },
      "description": "The parameters needed for staking on Ethereum via Kiln.",
      "title": "EthereumKiln: Staking Parameters"
    },
    "v1EthereumKilnUnstakeParameters": {
      "type": "object",
      "properties": {
        "stakerAddress": {
          "type": "string",
          "description": "The address you wish to unstake from."
        },
        "integratorContractAddress": {
          "type": "string",
          "description": "The address of the integrator contract."
        },
        "amount": {
          "$ref": "#/definitions/v1Amount",
          "description": "The amount of Ethereum to unstake in wei."
        }
      },
      "description": "The parameters required for the unstake action on Ethereum Kiln.",
      "title": "EthereumKiln: Unstake Parameters",
      "required": [
        "stakerAddress",
        "integratorContractAddress",
        "amount"
      ]
    },
    "v1EthereumNativeStakeParameters": {
      "type": "object",
      "properties": {
        "withdrawalAddress": {
          "type": "string",
          "title": "Ethereum address used to withdrawal funds"
        },
        "feeRecipient": {
          "type": "string",
          "title": "Ethereum address used to accumulate fees"
        },
        "amount": {
          "$ref": "#/definitions/v1Amount",
          "title": "Amount of ETH to stake in increments of 32"
        }
      },
      "title": "Ethereum: Native Stake Parameters",
      "required": [
        "withdrawalAddress",
        "feeRecipient",
        "amount"
      ]
    },
    "v1EthereumStakingParameters": {
      "type": "object",
      "properties": {
        "nativeStakeParameters": {
          "$ref": "#/definitions/v1EthereumNativeStakeParameters",
          "title": "Native staking parameters"
        }
      },
      "title": "Ethereum: Staking Parameters"
    },
    "v1ListActionsResponse": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Action"
          },
          "description": "The list of actions."
        }
      },
      "description": "The response message for ListActions."
    },
    "v1ListNetworksResponse": {
      "type": "object",
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Network"
          },
          "description": "The list of networks."
        }
      },
      "description": "The response message for ListNetworks."
    },
    "v1ListProtocolsResponse": {
      "type": "object",
      "properties": {
        "protocols": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Protocol"
          },
          "description": "The list of protocols."
        }
      },
      "description": "The response message for ListProtocols."
    },
    "v1ListStakingTargetsResponse": {
      "type": "object",
      "properties": {
        "stakingTargets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StakingTarget"
          },
          "description": "The list of staking targets."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token which can be provided as `page_token` to retrieve the next page.\nIf this field is omitted, there are no additional pages."
        }
      },
      "description": "The response message for ListStakingTargets."
    },
    "v1ListWorkflowsResponse": {
      "type": "object",
      "properties": {
        "workflows": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Workflow"
          },
          "description": "The list of workflows."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token which can be provided as `page_token` to retrieve the next page.\nIf this field is omitted, there are no additional pages."
        }
      },
      "description": "The response message for ListWorkflows."
    },
    "v1Network": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Network.\nFormat: protocols/{protocolName}/networks/{networkName}\nEx: protocols/ethereum_kiln/networks/holesky"
        }
      },
      "description": "A Network resource represents a blockchain network e.g. mainnet, testnet, etc."
    },
    "v1PriorityFee": {
      "type": "object",
      "properties": {
        "computeUnitLimit": {
          "type": "string",
          "format": "int64",
          "description": "The maximum number of compute units a transaction is allowed to consume."
        },
        "unitPrice": {
          "type": "string",
          "format": "int64",
          "description": "The price to pay per compute unit."
        }
      },
      "description": "A prioritization fee that can be added to a Solana transaction."
    },
    "v1Protocol": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Protocol.\nFormat: protocols/{protocolName}\nEx: protocols/ethereum_kiln"
        }
      },
      "description": "A Protocol resource (e.g. ethereum_kiln, solana etc.)."
    },
    "v1ProvisionInfraStepOutput": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/v1ProvisionInfraStepOutputState",
          "description": "The state of the provision infra step.",
          "readOnly": true
        }
      },
      "description": "The details for an infrastructure provision request."
    },
    "v1ProvisionInfraStepOutputState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_IN_PROGRESS",
        "STATE_COMPLETED",
        "STATE_FAILED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "State defines an enumeration of states for provisioning infra.\n\n - STATE_UNSPECIFIED: Unspecified step state.\n - STATE_IN_PROGRESS: Provision step is in-progress.\n - STATE_COMPLETED: Provision step completed.\n - STATE_FAILED: Provision step failed."
    },
    "v1SolanaClaimStakeParameters": {
      "type": "object",
      "properties": {
        "walletAddress": {
          "type": "string",
          "description": "The address which is the signing authority to claim stake."
        },
        "stakeAccountAddress": {
          "type": "string",
          "description": "The address of the stake account to claim stake from."
        },
        "priorityFee": {
          "$ref": "#/definitions/v1PriorityFee",
          "description": "The option to set a priority fee for the transaction."
        }
      },
      "description": "The parameters required to perform a claim stake operation on Solana.",
      "title": "Solana: Claim Stake Parameters"
    },
    "v1SolanaStakeParameters": {
      "type": "object",
      "properties": {
        "walletAddress": {
          "type": "string",
          "description": "The address where the funds are coming from to stake."
        },
        "validatorAddress": {
          "type": "string",
          "description": "The address of the validator."
        },
        "amount": {
          "$ref": "#/definitions/v1Amount",
          "title": "The amount of Solana to stake in lamports. (1 lamport = 0.000000001 SOL)"
        },
        "priorityFee": {
          "$ref": "#/definitions/v1PriorityFee",
          "description": "The option to set a priority fee for the transaction."
        }
      },
      "description": "The parameters required to perform a stake operation on Solana.",
      "title": "Solana: Stake Parameters"
    },
    "v1SolanaStakingContextDetails": {
      "type": "object",
      "properties": {
        "balance": {
          "$ref": "#/definitions/v1Amount",
          "description": "The total balance of the main wallet address (system account).\nUsed to check the balance for any future staking or transaction to send."
        },
        "currentEpoch": {
          "type": "string",
          "format": "int64",
          "description": "The current epoch that the Solana blockchain is in.\nUsed as a frame of reference for future stake activations and deactivations."
        },
        "epochCompletionPercentage": {
          "type": "string",
          "description": "How much of the epoch has passed as a percentage.\nUsed to inform how much time is left before a stake is activated or deactivated."
        },
        "stakeAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StakeAccount"
          },
          "description": "The list of staking accounts that are linked to the main wallet address (system account).\nUsed to check for statuses and balances of all stake accounts related to the main wallet address that\nthey're linked to."
        }
      },
      "description": "The protocol specific details for a Solana staking context.",
      "title": "Solana: Staking Context Details"
    },
    "v1SolanaStakingContextParameters": {
      "type": "object",
      "description": "The protocol specific parameters required for fetching a staking context.",
      "title": "Solana: Staking Context Parameters"
    },
    "v1SolanaStakingParameters": {
      "type": "object",
      "properties": {
        "stakeParameters": {
          "$ref": "#/definitions/v1SolanaStakeParameters",
          "description": "The parameters for stake action on Solana."
        },
        "unstakeParameters": {
          "$ref": "#/definitions/v1SolanaUnstakeParameters",
          "description": "The parameters for unstake action on Solana."
        },
        "claimStakeParameters": {
          "$ref": "#/definitions/v1SolanaClaimStakeParameters",
          "description": "The parameters for claim stake action on Solana."
        }
      },
      "description": "The parameters needed for staking on Solana.",
      "title": "Solana: Staking Parameters"
    },
    "v1SolanaUnstakeParameters": {
      "type": "object",
      "properties": {
        "walletAddress": {
          "type": "string",
          "description": "The address which is the signing authority to unstake."
        },
        "stakeAccountAddress": {
          "type": "string",
          "description": "The address of the stake account to unstake from."
        },
        "amount": {
          "$ref": "#/definitions/v1Amount",
          "title": "The amount of Solana to unstake in lamports. (1 lamport = 0.000000001 SOL)"
        },
        "priorityFee": {
          "$ref": "#/definitions/v1PriorityFee",
          "description": "The option to set a priority fee for the transaction."
        }
      },
      "description": "The parameters required to perform a unstake operation on Solana.",
      "title": "Solana: Unstake Parameters"
    },
    "v1StakeAccount": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The address of the stake account.\nUsed to hold the staked funds transferred over from the main wallet."
        },
        "bondedStake": {
          "$ref": "#/definitions/v1Amount",
          "description": "The bonded balance in lamports on the stake account (rent is not included in bonded amount).\nUsed to check the amount that is currently staked."
        },
        "rentReserve": {
          "$ref": "#/definitions/v1Amount",
          "description": "The rent amount for the stake account in lamports.\nUsed to highlight the amount used as the rent to maintain the address on the Solana blockchain."
        },
        "balance": {
          "$ref": "#/definitions/v1Amount",
          "description": "The total balance on the address in lamports.\nUsed to check the total balance for the stake account."
        },
        "balanceState": {
          "$ref": "#/definitions/StakeAccountBalanceState",
          "description": "The balance state of the stake account.\nUsed to show what state the currently staked funds are in.",
          "readOnly": true
        },
        "validator": {
          "type": "string",
          "description": "The validator (vote account) that the stake account is assigned to stake to.\nUsed to show where the staked funds are staked to."
        }
      },
      "description": "The balance information for a stake account."
    },
    "v1StakingTarget": {
      "type": "object",
      "properties": {
        "validator": {
          "$ref": "#/definitions/v1Validator",
          "description": "A validator to stake to."
        },
        "contract": {
          "$ref": "#/definitions/v1Contract",
          "description": "A contract to send a staking action to."
        }
      },
      "description": "A Staking Target represents a destination that you perform an action on related to staking."
    },
    "v1TxStepOutput": {
      "type": "object",
      "properties": {
        "unsignedTx": {
          "type": "string",
          "description": "The unsigned transaction which was signed in order to be broadcasted.",
          "readOnly": true
        },
        "signedTx": {
          "type": "string",
          "description": "The signed transaction which was asked to be broadcasted.",
          "readOnly": true
        },
        "txHash": {
          "type": "string",
          "description": "The hash of the broadcasted transaction.",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/v1TxStepOutputState",
          "description": "The state of the transaction step.",
          "readOnly": true
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message if the transaction step failed.",
          "readOnly": true
        }
      },
      "description": "The details of a transaction being constructed and broadcasted to the network."
    },
    "v1TxStepOutputState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_NOT_CONSTRUCTED",
        "STATE_CONSTRUCTED",
        "STATE_PENDING_EXT_BROADCAST",
        "STATE_SIGNED",
        "STATE_BROADCASTING",
        "STATE_CONFIRMING",
        "STATE_CONFIRMED",
        "STATE_FINALIZED",
        "STATE_FAILED",
        "STATE_SUCCESS"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "State defines an enumeration of states for a staking transaction.\n\n - STATE_UNSPECIFIED: Unspecified transaction state, this is for backwards compatibility.\n - STATE_NOT_CONSTRUCTED: Tx has not yet been constructed in the backend.\n - STATE_CONSTRUCTED: Tx construction is over in the backend.\n - STATE_PENDING_EXT_BROADCAST: Tx is waiting to be externally broadcasted by the customer.\n - STATE_SIGNED: Tx has been signed and returned to the backend.\n - STATE_BROADCASTING: Tx is being broadcasted to the network.\n - STATE_CONFIRMING: Tx is waiting for confirmation.\n - STATE_CONFIRMED: Tx has been confirmed to be included in a block.\n - STATE_FINALIZED: Tx has been finalized.\n - STATE_FAILED: Tx construction or broadcasting failed.\n - STATE_SUCCESS: Tx has been successfully executed."
    },
    "v1Validator": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Validator.\nFormat: protocols/{protocolName}/networks/{networkName}/stakingTargets/{validatorName}\nEx: protocols/solana/networks/testnet/stakingTargets/GkqYQysEGmuL6V2AJoNnWZUz2ZBGWhzQXsJiXm2CLKAN"
        },
        "address": {
          "type": "string",
          "description": "The public address of the validator."
        },
        "commissionRate": {
          "type": "number",
          "format": "float",
          "title": "The rate of commission for the validator"
        }
      },
      "description": "A Validator resource represents an active validator for the given protocol network."
    },
    "v1ViewStakingContextResponse": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The address you are getting a staking context for."
        },
        "ethereumKilnStakingContextDetails": {
          "$ref": "#/definitions/v1EthereumKilnStakingContextDetails",
          "description": "EthereumKiln staking context details."
        },
        "solanaStakingContextDetails": {
          "$ref": "#/definitions/v1SolanaStakingContextDetails",
          "description": "Solana staking context details."
        }
      },
      "description": "The response message for the ViewStakingContext request.",
      "required": [
        "address",
        "ethereumKilnStakingContextDetails",
        "solanaStakingContextDetails"
      ]
    },
    "v1WaitStepOutput": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "int64",
          "description": "The beginning of wait period.",
          "readOnly": true
        },
        "current": {
          "type": "string",
          "format": "int64",
          "description": "The current wait progress.",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "format": "int64",
          "description": "The target wait end point.",
          "readOnly": true
        },
        "unit": {
          "$ref": "#/definitions/WaitStepOutputWaitUnit",
          "description": "The wait unit (like checkpoint, block, epoch etc).",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/v1WaitStepOutputState",
          "description": "The state of the wait step.",
          "readOnly": true
        }
      },
      "description": "The output details of a step where we wait for some kind of on-chain activity to finish like reaching a certain checkpoint, epoch or block."
    },
    "v1WaitStepOutputState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_NOT_STARTED",
        "STATE_IN_PROGRESS",
        "STATE_COMPLETED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "WaitStepState defines an enumeration of states for a wait step.\n\n - STATE_UNSPECIFIED: Unspecified wait step state.\n - STATE_NOT_STARTED: Wait step has not started.\n - STATE_IN_PROGRESS: Wait step is in-progress.\n - STATE_COMPLETED: Wait step completed."
    },
    "v1Workflow": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the workflow.\nFormat: workflows/{workflowUUID}\nEx: workflows/123e4567-e89b-12d3-a456-426614174000",
          "readOnly": true
        },
        "action": {
          "type": "string",
          "title": "The resource name of the action being\nperformed.\nFormat: protocols/{protocol}/networks/{network}/actions/{action}"
        },
        "solanaStakingParameters": {
          "$ref": "#/definitions/v1SolanaStakingParameters",
          "description": "Solana staking parameters."
        },
        "ethereumKilnStakingParameters": {
          "$ref": "#/definitions/v1EthereumKilnStakingParameters",
          "description": "EthereumKiln staking parameters."
        },
        "ethereumStakingParameters": {
          "$ref": "#/definitions/v1EthereumStakingParameters",
          "description": "Ethereum staking parameters."
        },
        "state": {
          "$ref": "#/definitions/v1WorkflowState",
          "description": "The current state of the workflow.",
          "readOnly": true
        },
        "currentStepId": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the current step.",
          "readOnly": true
        },
        "steps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WorkflowStep"
          },
          "description": "The list of steps for this workflow.",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the workflow was created.",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the workflow was last updated.",
          "readOnly": true
        },
        "completeTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the workflow completed.",
          "readOnly": true
        }
      },
      "description": "A Workflow resource.",
      "required": [
        "action",
        "solanaStakingParameters",
        "ethereumKilnStakingParameters",
        "ethereumStakingParameters"
      ]
    },
    "v1WorkflowState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_IN_PROGRESS",
        "STATE_WAITING_FOR_EXT_BROADCAST",
        "STATE_COMPLETED",
        "STATE_FAILED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "Example flows:\n A workflow leading to a successful completion.\n IN_PROGRESS -\u003e WAITING_FOR_EXT_BROADCAST -\u003e IN_PROGRESS -\u003e COMPLETED\n A workflow leading to a failure.\n IN_PROGRESS -\u003e WAITING_FOR_EXT_BROADCAST -\u003e IN_PROGRESS -\u003e FAILED\n\n - STATE_UNSPECIFIED: Unspecified workflow state, this is for backwards compatibility.\n - STATE_IN_PROGRESS: In Progress represents a workflow that is currently in progress.\n - STATE_WAITING_FOR_EXT_BROADCAST: Waiting for external broadcast represents the workflow is waiting for the customer to broadcast a tx and return its corresponding tx hash.\n - STATE_COMPLETED: Completed represents the workflow has completed.\n - STATE_FAILED: Failed represents the workflow has failed.",
      "title": "The state of a workflow"
    },
    "v1WorkflowStep": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The human readable name of the step.",
          "readOnly": true
        },
        "txStepOutput": {
          "$ref": "#/definitions/v1TxStepOutput",
          "description": "The tx step output (e.g. transaction metadata such as unsigned tx, signed tx etc).",
          "readOnly": true
        },
        "waitStepOutput": {
          "$ref": "#/definitions/v1WaitStepOutput",
          "description": "The waiting details for any kind like how many checkpoints away for unbonding etc.",
          "readOnly": true
        },
        "provisionInfraStepOutput": {
          "$ref": "#/definitions/v1ProvisionInfraStepOutput",
          "description": "The details for provisioned infrastructure.",
          "readOnly": true
        },
        "bulkTxStepOutput": {
          "$ref": "#/definitions/v1BulkTxStepOutput",
          "description": "The bulk tx step output (e.g. transaction metadata such as unsigned tx, signed tx etc).",
          "readOnly": true
        }
      },
      "description": "The information for a step in the workflow.",
      "title": "The information for a step in the workflow"
    }
  }
}
