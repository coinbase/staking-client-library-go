// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: coinbase/staking/orchestration/v1/workflow.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State defines an enumeration of states for a staking transaction.
type TxStepOutput_State int32

const (
	// Unspecified transaction state, this is for backwards compatibility.
	TxStepOutput_STATE_UNSPECIFIED TxStepOutput_State = 0
	// Tx has not yet been constructed in the backend.
	TxStepOutput_STATE_NOT_CONSTRUCTED TxStepOutput_State = 1
	// Tx construction is over in the backend.
	TxStepOutput_STATE_CONSTRUCTED TxStepOutput_State = 2
	// Tx is waiting to be externally broadcasted by the customer.
	TxStepOutput_STATE_PENDING_EXT_BROADCAST TxStepOutput_State = 16
	// Tx has been signed and returned to the backend.
	TxStepOutput_STATE_SIGNED TxStepOutput_State = 4
	// Tx is being broadcasted to the network.
	TxStepOutput_STATE_BROADCASTING TxStepOutput_State = 5
	// Tx is waiting for confirmation.
	TxStepOutput_STATE_CONFIRMING TxStepOutput_State = 6
	// Tx has been confirmed to be included in a block.
	TxStepOutput_STATE_CONFIRMED TxStepOutput_State = 7
	// Tx has been finalized.
	TxStepOutput_STATE_FINALIZED TxStepOutput_State = 8
	// Tx construction or broadcasting failed.
	TxStepOutput_STATE_FAILED TxStepOutput_State = 9
	// Tx has been successfully executed.
	TxStepOutput_STATE_SUCCESS TxStepOutput_State = 10
)

// Enum value maps for TxStepOutput_State.
var (
	TxStepOutput_State_name = map[int32]string{
		0:  "STATE_UNSPECIFIED",
		1:  "STATE_NOT_CONSTRUCTED",
		2:  "STATE_CONSTRUCTED",
		16: "STATE_PENDING_EXT_BROADCAST",
		4:  "STATE_SIGNED",
		5:  "STATE_BROADCASTING",
		6:  "STATE_CONFIRMING",
		7:  "STATE_CONFIRMED",
		8:  "STATE_FINALIZED",
		9:  "STATE_FAILED",
		10: "STATE_SUCCESS",
	}
	TxStepOutput_State_value = map[string]int32{
		"STATE_UNSPECIFIED":           0,
		"STATE_NOT_CONSTRUCTED":       1,
		"STATE_CONSTRUCTED":           2,
		"STATE_PENDING_EXT_BROADCAST": 16,
		"STATE_SIGNED":                4,
		"STATE_BROADCASTING":          5,
		"STATE_CONFIRMING":            6,
		"STATE_CONFIRMED":             7,
		"STATE_FINALIZED":             8,
		"STATE_FAILED":                9,
		"STATE_SUCCESS":               10,
	}
)

func (x TxStepOutput_State) Enum() *TxStepOutput_State {
	p := new(TxStepOutput_State)
	*p = x
	return p
}

func (x TxStepOutput_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxStepOutput_State) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[0].Descriptor()
}

func (TxStepOutput_State) Type() protoreflect.EnumType {
	return &file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[0]
}

func (x TxStepOutput_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxStepOutput_State.Descriptor instead.
func (TxStepOutput_State) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{0, 0}
}

// The unit of wait time.
type WaitStepOutput_WaitUnit int32

const (
	// Unspecified wait time.
	WaitStepOutput_WAIT_UNIT_UNSPECIFIED WaitStepOutput_WaitUnit = 0
	// Wait time measured in seconds.
	WaitStepOutput_WAIT_UNIT_SECONDS WaitStepOutput_WaitUnit = 1
	// Wait time measured in blocks.
	WaitStepOutput_WAIT_UNIT_BLOCKS WaitStepOutput_WaitUnit = 2
	// Wait time measured in epochs.
	WaitStepOutput_WAIT_UNIT_EPOCHS WaitStepOutput_WaitUnit = 3
	// Wait time measured in checkpoints.
	WaitStepOutput_WAIT_UNIT_CHECKPOINTS WaitStepOutput_WaitUnit = 4
)

// Enum value maps for WaitStepOutput_WaitUnit.
var (
	WaitStepOutput_WaitUnit_name = map[int32]string{
		0: "WAIT_UNIT_UNSPECIFIED",
		1: "WAIT_UNIT_SECONDS",
		2: "WAIT_UNIT_BLOCKS",
		3: "WAIT_UNIT_EPOCHS",
		4: "WAIT_UNIT_CHECKPOINTS",
	}
	WaitStepOutput_WaitUnit_value = map[string]int32{
		"WAIT_UNIT_UNSPECIFIED": 0,
		"WAIT_UNIT_SECONDS":     1,
		"WAIT_UNIT_BLOCKS":      2,
		"WAIT_UNIT_EPOCHS":      3,
		"WAIT_UNIT_CHECKPOINTS": 4,
	}
)

func (x WaitStepOutput_WaitUnit) Enum() *WaitStepOutput_WaitUnit {
	p := new(WaitStepOutput_WaitUnit)
	*p = x
	return p
}

func (x WaitStepOutput_WaitUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WaitStepOutput_WaitUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[1].Descriptor()
}

func (WaitStepOutput_WaitUnit) Type() protoreflect.EnumType {
	return &file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[1]
}

func (x WaitStepOutput_WaitUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WaitStepOutput_WaitUnit.Descriptor instead.
func (WaitStepOutput_WaitUnit) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{1, 0}
}

// WaitStepState defines an enumeration of states for a wait step.
type WaitStepOutput_State int32

const (
	// Unspecified wait step state.
	WaitStepOutput_STATE_UNSPECIFIED WaitStepOutput_State = 0
	// Wait step has not started.
	WaitStepOutput_STATE_NOT_STARTED WaitStepOutput_State = 1
	// Wait step is in-progress.
	WaitStepOutput_STATE_IN_PROGRESS WaitStepOutput_State = 2
	// Wait step completed.
	WaitStepOutput_STATE_COMPLETED WaitStepOutput_State = 3
)

// Enum value maps for WaitStepOutput_State.
var (
	WaitStepOutput_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_NOT_STARTED",
		2: "STATE_IN_PROGRESS",
		3: "STATE_COMPLETED",
	}
	WaitStepOutput_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_NOT_STARTED": 1,
		"STATE_IN_PROGRESS": 2,
		"STATE_COMPLETED":   3,
	}
)

func (x WaitStepOutput_State) Enum() *WaitStepOutput_State {
	p := new(WaitStepOutput_State)
	*p = x
	return p
}

func (x WaitStepOutput_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WaitStepOutput_State) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[2].Descriptor()
}

func (WaitStepOutput_State) Type() protoreflect.EnumType {
	return &file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[2]
}

func (x WaitStepOutput_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WaitStepOutput_State.Descriptor instead.
func (WaitStepOutput_State) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{1, 1}
}

// State defines an enumeration of states for provisioning infra.
type ProvisionInfraStepOutput_State int32

const (
	// Unspecified step state.
	ProvisionInfraStepOutput_STATE_UNSPECIFIED ProvisionInfraStepOutput_State = 0
	// Provision step is in-progress.
	ProvisionInfraStepOutput_STATE_IN_PROGRESS ProvisionInfraStepOutput_State = 2
	// Provision step completed.
	ProvisionInfraStepOutput_STATE_COMPLETED ProvisionInfraStepOutput_State = 3
	// Provision step failed.
	ProvisionInfraStepOutput_STATE_FAILED ProvisionInfraStepOutput_State = 4
)

// Enum value maps for ProvisionInfraStepOutput_State.
var (
	ProvisionInfraStepOutput_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		2: "STATE_IN_PROGRESS",
		3: "STATE_COMPLETED",
		4: "STATE_FAILED",
	}
	ProvisionInfraStepOutput_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_IN_PROGRESS": 2,
		"STATE_COMPLETED":   3,
		"STATE_FAILED":      4,
	}
)

func (x ProvisionInfraStepOutput_State) Enum() *ProvisionInfraStepOutput_State {
	p := new(ProvisionInfraStepOutput_State)
	*p = x
	return p
}

func (x ProvisionInfraStepOutput_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvisionInfraStepOutput_State) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[3].Descriptor()
}

func (ProvisionInfraStepOutput_State) Type() protoreflect.EnumType {
	return &file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[3]
}

func (x ProvisionInfraStepOutput_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvisionInfraStepOutput_State.Descriptor instead.
func (ProvisionInfraStepOutput_State) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{2, 0}
}

// State defines an enumeration of states for a staking transaction.
type BulkTxStepOutput_State int32

const (
	// Unspecified transaction state.
	BulkTxStepOutput_STATE_UNSPECIFIED BulkTxStepOutput_State = 0
	// Txs construction in progress.
	BulkTxStepOutput_STATE_IN_PROGRESS BulkTxStepOutput_State = 1
	// Tx construction failed.
	BulkTxStepOutput_STATE_FAILED BulkTxStepOutput_State = 2
	// Tx construction completed.
	BulkTxStepOutput_STATE_COMPLETED BulkTxStepOutput_State = 3
)

// Enum value maps for BulkTxStepOutput_State.
var (
	BulkTxStepOutput_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_IN_PROGRESS",
		2: "STATE_FAILED",
		3: "STATE_COMPLETED",
	}
	BulkTxStepOutput_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_IN_PROGRESS": 1,
		"STATE_FAILED":      2,
		"STATE_COMPLETED":   3,
	}
)

func (x BulkTxStepOutput_State) Enum() *BulkTxStepOutput_State {
	p := new(BulkTxStepOutput_State)
	*p = x
	return p
}

func (x BulkTxStepOutput_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BulkTxStepOutput_State) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[4].Descriptor()
}

func (BulkTxStepOutput_State) Type() protoreflect.EnumType {
	return &file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[4]
}

func (x BulkTxStepOutput_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BulkTxStepOutput_State.Descriptor instead.
func (BulkTxStepOutput_State) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{3, 0}
}

// The state of a workflow
type Workflow_State int32

const (
	// Unspecified workflow state, this is for backwards compatibility.
	Workflow_STATE_UNSPECIFIED Workflow_State = 0
	// In Progress represents a workflow that is currently in progress.
	Workflow_STATE_IN_PROGRESS Workflow_State = 1
	// Waiting for external broadcast represents the workflow is waiting for the customer to broadcast a tx and return its corresponding tx hash.
	Workflow_STATE_WAITING_FOR_EXT_BROADCAST Workflow_State = 9
	// Completed represents the workflow has completed.
	Workflow_STATE_COMPLETED Workflow_State = 3
	// Failed represents the workflow has failed.
	Workflow_STATE_FAILED Workflow_State = 4
)

// Enum value maps for Workflow_State.
var (
	Workflow_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_IN_PROGRESS",
		9: "STATE_WAITING_FOR_EXT_BROADCAST",
		3: "STATE_COMPLETED",
		4: "STATE_FAILED",
	}
	Workflow_State_value = map[string]int32{
		"STATE_UNSPECIFIED":               0,
		"STATE_IN_PROGRESS":               1,
		"STATE_WAITING_FOR_EXT_BROADCAST": 9,
		"STATE_COMPLETED":                 3,
		"STATE_FAILED":                    4,
	}
)

func (x Workflow_State) Enum() *Workflow_State {
	p := new(Workflow_State)
	*p = x
	return p
}

func (x Workflow_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Workflow_State) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[5].Descriptor()
}

func (Workflow_State) Type() protoreflect.EnumType {
	return &file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes[5]
}

func (x Workflow_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Workflow_State.Descriptor instead.
func (Workflow_State) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{5, 0}
}

// The details of a transaction being constructed and broadcasted to the network.
type TxStepOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unsigned transaction which was signed in order to be broadcasted.
	UnsignedTx string `protobuf:"bytes,1,opt,name=unsigned_tx,json=unsignedTx,proto3" json:"unsigned_tx,omitempty"`
	// The signed transaction which was asked to be broadcasted.
	SignedTx string `protobuf:"bytes,2,opt,name=signed_tx,json=signedTx,proto3" json:"signed_tx,omitempty"`
	// The hash of the broadcasted transaction.
	TxHash string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// The state of the transaction step.
	State TxStepOutput_State `protobuf:"varint,4,opt,name=state,proto3,enum=coinbase.staking.orchestration.v1.TxStepOutput_State" json:"state,omitempty"`
	// The error message if the transaction step failed.
	ErrorMessage string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *TxStepOutput) Reset() {
	*x = TxStepOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxStepOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxStepOutput) ProtoMessage() {}

func (x *TxStepOutput) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxStepOutput.ProtoReflect.Descriptor instead.
func (*TxStepOutput) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{0}
}

func (x *TxStepOutput) GetUnsignedTx() string {
	if x != nil {
		return x.UnsignedTx
	}
	return ""
}

func (x *TxStepOutput) GetSignedTx() string {
	if x != nil {
		return x.SignedTx
	}
	return ""
}

func (x *TxStepOutput) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TxStepOutput) GetState() TxStepOutput_State {
	if x != nil {
		return x.State
	}
	return TxStepOutput_STATE_UNSPECIFIED
}

func (x *TxStepOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// The output details of a step where we wait for some kind of on-chain activity to finish like reaching a certain checkpoint, epoch or block.
type WaitStepOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The beginning of wait period.
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// The current wait progress.
	Current int64 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	// The target wait end point.
	Target int64 `protobuf:"varint,3,opt,name=target,proto3" json:"target,omitempty"`
	// The wait unit (like checkpoint, block, epoch etc).
	Unit WaitStepOutput_WaitUnit `protobuf:"varint,4,opt,name=unit,proto3,enum=coinbase.staking.orchestration.v1.WaitStepOutput_WaitUnit" json:"unit,omitempty"`
	// The state of the wait step.
	State WaitStepOutput_State `protobuf:"varint,5,opt,name=state,proto3,enum=coinbase.staking.orchestration.v1.WaitStepOutput_State" json:"state,omitempty"`
}

func (x *WaitStepOutput) Reset() {
	*x = WaitStepOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitStepOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitStepOutput) ProtoMessage() {}

func (x *WaitStepOutput) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitStepOutput.ProtoReflect.Descriptor instead.
func (*WaitStepOutput) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{1}
}

func (x *WaitStepOutput) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *WaitStepOutput) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *WaitStepOutput) GetTarget() int64 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *WaitStepOutput) GetUnit() WaitStepOutput_WaitUnit {
	if x != nil {
		return x.Unit
	}
	return WaitStepOutput_WAIT_UNIT_UNSPECIFIED
}

func (x *WaitStepOutput) GetState() WaitStepOutput_State {
	if x != nil {
		return x.State
	}
	return WaitStepOutput_STATE_UNSPECIFIED
}

// The details for an infrastructure provision request.
type ProvisionInfraStepOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state of the provision infra step.
	State ProvisionInfraStepOutput_State `protobuf:"varint,1,opt,name=state,proto3,enum=coinbase.staking.orchestration.v1.ProvisionInfraStepOutput_State" json:"state,omitempty"`
}

func (x *ProvisionInfraStepOutput) Reset() {
	*x = ProvisionInfraStepOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionInfraStepOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionInfraStepOutput) ProtoMessage() {}

func (x *ProvisionInfraStepOutput) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionInfraStepOutput.ProtoReflect.Descriptor instead.
func (*ProvisionInfraStepOutput) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{2}
}

func (x *ProvisionInfraStepOutput) GetState() ProvisionInfraStepOutput_State {
	if x != nil {
		return x.State
	}
	return ProvisionInfraStepOutput_STATE_UNSPECIFIED
}

// The details of multiple transactions being constructed and broadcasted to the network.
type BulkTxStepOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unsigned transactions that must be signed and broadcasted.
	UnsignedTxs []string `protobuf:"bytes,1,rep,name=unsigned_txs,json=unsignedTxs,proto3" json:"unsigned_txs,omitempty"`
	// The state of the bulk tx step.
	State BulkTxStepOutput_State `protobuf:"varint,2,opt,name=state,proto3,enum=coinbase.staking.orchestration.v1.BulkTxStepOutput_State" json:"state,omitempty"`
}

func (x *BulkTxStepOutput) Reset() {
	*x = BulkTxStepOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTxStepOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTxStepOutput) ProtoMessage() {}

func (x *BulkTxStepOutput) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTxStepOutput.ProtoReflect.Descriptor instead.
func (*BulkTxStepOutput) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{3}
}

func (x *BulkTxStepOutput) GetUnsignedTxs() []string {
	if x != nil {
		return x.UnsignedTxs
	}
	return nil
}

func (x *BulkTxStepOutput) GetState() BulkTxStepOutput_State {
	if x != nil {
		return x.State
	}
	return BulkTxStepOutput_STATE_UNSPECIFIED
}

// The information for a step in the workflow.
type WorkflowStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The human readable name of the step.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The output of the current step. It can be of tx or wait type.
	//
	// Types that are assignable to Output:
	//
	//	*WorkflowStep_TxStepOutput
	//	*WorkflowStep_WaitStepOutput
	//	*WorkflowStep_ProvisionInfraStepOutput
	//	*WorkflowStep_BulkTxStepOutput
	Output isWorkflowStep_Output `protobuf_oneof:"output"`
}

func (x *WorkflowStep) Reset() {
	*x = WorkflowStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStep) ProtoMessage() {}

func (x *WorkflowStep) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStep.ProtoReflect.Descriptor instead.
func (*WorkflowStep) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{4}
}

func (x *WorkflowStep) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *WorkflowStep) GetOutput() isWorkflowStep_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *WorkflowStep) GetTxStepOutput() *TxStepOutput {
	if x, ok := x.GetOutput().(*WorkflowStep_TxStepOutput); ok {
		return x.TxStepOutput
	}
	return nil
}

func (x *WorkflowStep) GetWaitStepOutput() *WaitStepOutput {
	if x, ok := x.GetOutput().(*WorkflowStep_WaitStepOutput); ok {
		return x.WaitStepOutput
	}
	return nil
}

func (x *WorkflowStep) GetProvisionInfraStepOutput() *ProvisionInfraStepOutput {
	if x, ok := x.GetOutput().(*WorkflowStep_ProvisionInfraStepOutput); ok {
		return x.ProvisionInfraStepOutput
	}
	return nil
}

func (x *WorkflowStep) GetBulkTxStepOutput() *BulkTxStepOutput {
	if x, ok := x.GetOutput().(*WorkflowStep_BulkTxStepOutput); ok {
		return x.BulkTxStepOutput
	}
	return nil
}

type isWorkflowStep_Output interface {
	isWorkflowStep_Output()
}

type WorkflowStep_TxStepOutput struct {
	// The tx step output (e.g. transaction metadata such as unsigned tx, signed tx etc).
	TxStepOutput *TxStepOutput `protobuf:"bytes,2,opt,name=tx_step_output,json=txStepOutput,proto3,oneof"`
}

type WorkflowStep_WaitStepOutput struct {
	// The waiting details for any kind like how many checkpoints away for unbonding etc.
	WaitStepOutput *WaitStepOutput `protobuf:"bytes,3,opt,name=wait_step_output,json=waitStepOutput,proto3,oneof"`
}

type WorkflowStep_ProvisionInfraStepOutput struct {
	// The details for provisioned infrastructure.
	ProvisionInfraStepOutput *ProvisionInfraStepOutput `protobuf:"bytes,4,opt,name=provision_infra_step_output,json=provisionInfraStepOutput,proto3,oneof"`
}

type WorkflowStep_BulkTxStepOutput struct {
	// The bulk tx step output (e.g. transaction metadata such as unsigned tx, signed tx etc).
	BulkTxStepOutput *BulkTxStepOutput `protobuf:"bytes,5,opt,name=bulk_tx_step_output,json=bulkTxStepOutput,proto3,oneof"`
}

func (*WorkflowStep_TxStepOutput) isWorkflowStep_Output() {}

func (*WorkflowStep_WaitStepOutput) isWorkflowStep_Output() {}

func (*WorkflowStep_ProvisionInfraStepOutput) isWorkflowStep_Output() {}

func (*WorkflowStep_BulkTxStepOutput) isWorkflowStep_Output() {}

// A Workflow resource.
type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the workflow.
	// Format: workflows/{workflowUUID}
	// Ex: workflows/123e4567-e89b-12d3-a456-426614174000
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The resource name of the action being
	// performed.
	// Format: protocols/{protocol}/networks/{network}/actions/{action}
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// The parameters of the action to take.
	//
	// Types that are assignable to StakingParameters:
	//
	//	*Workflow_SolanaStakingParameters
	//	*Workflow_EthereumKilnStakingParameters
	//	*Workflow_EthereumStakingParameters
	StakingParameters isWorkflow_StakingParameters `protobuf_oneof:"staking_parameters"`
	// The current state of the workflow.
	State Workflow_State `protobuf:"varint,4,opt,name=state,proto3,enum=coinbase.staking.orchestration.v1.Workflow_State" json:"state,omitempty"`
	// The index of the current step.
	CurrentStepId int32 `protobuf:"varint,5,opt,name=current_step_id,json=currentStepId,proto3" json:"current_step_id,omitempty"`
	// The list of steps for this workflow.
	Steps []*WorkflowStep `protobuf:"bytes,6,rep,name=steps,proto3" json:"steps,omitempty"`
	// The timestamp the workflow was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The timestamp the workflow was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The timestamp the workflow completed.
	CompleteTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{5}
}

func (x *Workflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workflow) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (m *Workflow) GetStakingParameters() isWorkflow_StakingParameters {
	if m != nil {
		return m.StakingParameters
	}
	return nil
}

func (x *Workflow) GetSolanaStakingParameters() *SolanaStakingParameters {
	if x, ok := x.GetStakingParameters().(*Workflow_SolanaStakingParameters); ok {
		return x.SolanaStakingParameters
	}
	return nil
}

func (x *Workflow) GetEthereumKilnStakingParameters() *EthereumKilnStakingParameters {
	if x, ok := x.GetStakingParameters().(*Workflow_EthereumKilnStakingParameters); ok {
		return x.EthereumKilnStakingParameters
	}
	return nil
}

func (x *Workflow) GetEthereumStakingParameters() *EthereumStakingParameters {
	if x, ok := x.GetStakingParameters().(*Workflow_EthereumStakingParameters); ok {
		return x.EthereumStakingParameters
	}
	return nil
}

func (x *Workflow) GetState() Workflow_State {
	if x != nil {
		return x.State
	}
	return Workflow_STATE_UNSPECIFIED
}

func (x *Workflow) GetCurrentStepId() int32 {
	if x != nil {
		return x.CurrentStepId
	}
	return 0
}

func (x *Workflow) GetSteps() []*WorkflowStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Workflow) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Workflow) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Workflow) GetCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompleteTime
	}
	return nil
}

type isWorkflow_StakingParameters interface {
	isWorkflow_StakingParameters()
}

type Workflow_SolanaStakingParameters struct {
	// Solana staking parameters.
	SolanaStakingParameters *SolanaStakingParameters `protobuf:"bytes,9,opt,name=solana_staking_parameters,json=solanaStakingParameters,proto3,oneof"`
}

type Workflow_EthereumKilnStakingParameters struct {
	// EthereumKiln staking parameters.
	EthereumKilnStakingParameters *EthereumKilnStakingParameters `protobuf:"bytes,10,opt,name=ethereum_kiln_staking_parameters,json=ethereumKilnStakingParameters,proto3,oneof"`
}

type Workflow_EthereumStakingParameters struct {
	// Ethereum staking parameters.
	EthereumStakingParameters *EthereumStakingParameters `protobuf:"bytes,13,opt,name=ethereum_staking_parameters,json=ethereumStakingParameters,proto3,oneof"`
}

func (*Workflow_SolanaStakingParameters) isWorkflow_StakingParameters() {}

func (*Workflow_EthereumKilnStakingParameters) isWorkflow_StakingParameters() {}

func (*Workflow_EthereumStakingParameters) isWorkflow_StakingParameters() {}

// The request message for CreateWorkflow.
type CreateWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workflow to create.
	Workflow *Workflow `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *CreateWorkflowRequest) Reset() {
	*x = CreateWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowRequest) ProtoMessage() {}

func (x *CreateWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{6}
}

func (x *CreateWorkflowRequest) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

// The message for GetWorkflow.
type GetWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the workflow.
	// Format: workflows/{workflow}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetWorkflowRequest) Reset() {
	*x = GetWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowRequest) ProtoMessage() {}

func (x *GetWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{7}
}

func (x *GetWorkflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The message for ListWorkflows.
type ListWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [AIP-160](https://google.aip.dev/160) filter
	// Supported fields:
	// - string action: "stake", "unstake"
	// - string protocol: "ethereum_kiln"
	// - string network: "holesky", "mainnet"
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	//	The maximum number of workflows to return. The service may
	//
	// return fewer than this value.
	//
	// If unspecified, 100 workflows will be returned.
	// The maximum value is 1000; values over 1000 will be floored to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token as part of the response of a previous call.
	// Provide this to retrieve the next page.
	//
	// When paginating, all other parameters must match the previous
	// request to list resources.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWorkflowsRequest) Reset() {
	*x = ListWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowsRequest) ProtoMessage() {}

func (x *ListWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{8}
}

func (x *ListWorkflowsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListWorkflowsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWorkflowsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// The response message for ListWorkflows.
type ListWorkflowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of workflows.
	Workflows []*Workflow `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	// A token which can be provided as `page_token` to retrieve the next page.
	// If this field is omitted, there are no additional pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListWorkflowsResponse) Reset() {
	*x = ListWorkflowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowsResponse) ProtoMessage() {}

func (x *ListWorkflowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowsResponse.ProtoReflect.Descriptor instead.
func (*ListWorkflowsResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{9}
}

func (x *ListWorkflowsResponse) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *ListWorkflowsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request message for PerformWorkflowStep.
type PerformWorkflowStepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the workflow.
	// Format: workflows/{workflow}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The index of the step to be performed.
	Step int32 `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	// Transaction metadata. This is either the signed transaction or transaction hash depending on the workflow's broadcast method.
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PerformWorkflowStepRequest) Reset() {
	*x = PerformWorkflowStepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformWorkflowStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformWorkflowStepRequest) ProtoMessage() {}

func (x *PerformWorkflowStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformWorkflowStepRequest.ProtoReflect.Descriptor instead.
func (*PerformWorkflowStepRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP(), []int{10}
}

func (x *PerformWorkflowStepRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PerformWorkflowStepRequest) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *PerformWorkflowStepRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_coinbase_staking_orchestration_v1_workflow_proto protoreflect.FileDescriptor

var file_coinbase_staking_orchestration_v1_workflow_proto_rawDesc = []byte{
	0x0a, 0x30, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x21, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x30, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x04, 0x0a, 0x0c,
	0x54, 0x78, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x78, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x78, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x50, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x85,
	0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x52,
	0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x0a, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x0b, 0x10, 0x0f, 0x2a, 0x15, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x49, 0x4e, 0x47, 0x2a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x49, 0x4e, 0x47, 0x2a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x2a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x2a, 0x18, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48,
	0x41, 0x42, 0x4c, 0x45, 0x2a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52,
	0x45, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x22, 0xf9, 0x03, 0x0a, 0x0e, 0x57, 0x61, 0x69, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x53, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x08, 0x57, 0x61,
	0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x45, 0x50, 0x4f, 0x43,
	0x48, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x04, 0x22,
	0x61, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x22, 0xd6, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x5c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5c, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x22, 0xee, 0x01, 0x0a, 0x10,
	0x42, 0x75, 0x6c, 0x6b, 0x54, 0x78, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x26, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x75, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x73, 0x12, 0x54, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x54, 0x78, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5c,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0x95, 0x04, 0x0a,
	0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x78, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x62, 0x0a, 0x10, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x48, 0x00, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x69, 0x0a, 0x13,
	0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x54, 0x78, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x10, 0x62, 0x75, 0x6c, 0x6b, 0x54, 0x78, 0x53, 0x74, 0x65,
	0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0x2a, 0x2a,
	0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x74, 0x65, 0x70, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0xd5, 0x09, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x19, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x17, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x20, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69,
	0x6c, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x1d, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x1b, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x48, 0x00, 0x52, 0x19, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x4c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xf8, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x45, 0x58,
	0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x09, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x22, 0x04, 0x08, 0x02, 0x10, 0x02, 0x22, 0x04, 0x08, 0x05, 0x10, 0x08,
	0x2a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x2a, 0x0f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x2a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x2a, 0x13, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x2a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x3a, 0x4d, 0xea, 0x41, 0x4a,
	0x0a, 0x1d, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x7d, 0x2a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x32, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x14, 0x0a, 0x12, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0x6b, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x8a, 0x01, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x67, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2d,
	0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_coinbase_staking_orchestration_v1_workflow_proto_rawDescOnce sync.Once
	file_coinbase_staking_orchestration_v1_workflow_proto_rawDescData = file_coinbase_staking_orchestration_v1_workflow_proto_rawDesc
)

func file_coinbase_staking_orchestration_v1_workflow_proto_rawDescGZIP() []byte {
	file_coinbase_staking_orchestration_v1_workflow_proto_rawDescOnce.Do(func() {
		file_coinbase_staking_orchestration_v1_workflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_staking_orchestration_v1_workflow_proto_rawDescData)
	})
	return file_coinbase_staking_orchestration_v1_workflow_proto_rawDescData
}

var file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_coinbase_staking_orchestration_v1_workflow_proto_goTypes = []interface{}{
	(TxStepOutput_State)(0),               // 0: coinbase.staking.orchestration.v1.TxStepOutput.State
	(WaitStepOutput_WaitUnit)(0),          // 1: coinbase.staking.orchestration.v1.WaitStepOutput.WaitUnit
	(WaitStepOutput_State)(0),             // 2: coinbase.staking.orchestration.v1.WaitStepOutput.State
	(ProvisionInfraStepOutput_State)(0),   // 3: coinbase.staking.orchestration.v1.ProvisionInfraStepOutput.State
	(BulkTxStepOutput_State)(0),           // 4: coinbase.staking.orchestration.v1.BulkTxStepOutput.State
	(Workflow_State)(0),                   // 5: coinbase.staking.orchestration.v1.Workflow.State
	(*TxStepOutput)(nil),                  // 6: coinbase.staking.orchestration.v1.TxStepOutput
	(*WaitStepOutput)(nil),                // 7: coinbase.staking.orchestration.v1.WaitStepOutput
	(*ProvisionInfraStepOutput)(nil),      // 8: coinbase.staking.orchestration.v1.ProvisionInfraStepOutput
	(*BulkTxStepOutput)(nil),              // 9: coinbase.staking.orchestration.v1.BulkTxStepOutput
	(*WorkflowStep)(nil),                  // 10: coinbase.staking.orchestration.v1.WorkflowStep
	(*Workflow)(nil),                      // 11: coinbase.staking.orchestration.v1.Workflow
	(*CreateWorkflowRequest)(nil),         // 12: coinbase.staking.orchestration.v1.CreateWorkflowRequest
	(*GetWorkflowRequest)(nil),            // 13: coinbase.staking.orchestration.v1.GetWorkflowRequest
	(*ListWorkflowsRequest)(nil),          // 14: coinbase.staking.orchestration.v1.ListWorkflowsRequest
	(*ListWorkflowsResponse)(nil),         // 15: coinbase.staking.orchestration.v1.ListWorkflowsResponse
	(*PerformWorkflowStepRequest)(nil),    // 16: coinbase.staking.orchestration.v1.PerformWorkflowStepRequest
	(*SolanaStakingParameters)(nil),       // 17: coinbase.staking.orchestration.v1.SolanaStakingParameters
	(*EthereumKilnStakingParameters)(nil), // 18: coinbase.staking.orchestration.v1.EthereumKilnStakingParameters
	(*EthereumStakingParameters)(nil),     // 19: coinbase.staking.orchestration.v1.EthereumStakingParameters
	(*timestamppb.Timestamp)(nil),         // 20: google.protobuf.Timestamp
}
var file_coinbase_staking_orchestration_v1_workflow_proto_depIdxs = []int32{
	0,  // 0: coinbase.staking.orchestration.v1.TxStepOutput.state:type_name -> coinbase.staking.orchestration.v1.TxStepOutput.State
	1,  // 1: coinbase.staking.orchestration.v1.WaitStepOutput.unit:type_name -> coinbase.staking.orchestration.v1.WaitStepOutput.WaitUnit
	2,  // 2: coinbase.staking.orchestration.v1.WaitStepOutput.state:type_name -> coinbase.staking.orchestration.v1.WaitStepOutput.State
	3,  // 3: coinbase.staking.orchestration.v1.ProvisionInfraStepOutput.state:type_name -> coinbase.staking.orchestration.v1.ProvisionInfraStepOutput.State
	4,  // 4: coinbase.staking.orchestration.v1.BulkTxStepOutput.state:type_name -> coinbase.staking.orchestration.v1.BulkTxStepOutput.State
	6,  // 5: coinbase.staking.orchestration.v1.WorkflowStep.tx_step_output:type_name -> coinbase.staking.orchestration.v1.TxStepOutput
	7,  // 6: coinbase.staking.orchestration.v1.WorkflowStep.wait_step_output:type_name -> coinbase.staking.orchestration.v1.WaitStepOutput
	8,  // 7: coinbase.staking.orchestration.v1.WorkflowStep.provision_infra_step_output:type_name -> coinbase.staking.orchestration.v1.ProvisionInfraStepOutput
	9,  // 8: coinbase.staking.orchestration.v1.WorkflowStep.bulk_tx_step_output:type_name -> coinbase.staking.orchestration.v1.BulkTxStepOutput
	17, // 9: coinbase.staking.orchestration.v1.Workflow.solana_staking_parameters:type_name -> coinbase.staking.orchestration.v1.SolanaStakingParameters
	18, // 10: coinbase.staking.orchestration.v1.Workflow.ethereum_kiln_staking_parameters:type_name -> coinbase.staking.orchestration.v1.EthereumKilnStakingParameters
	19, // 11: coinbase.staking.orchestration.v1.Workflow.ethereum_staking_parameters:type_name -> coinbase.staking.orchestration.v1.EthereumStakingParameters
	5,  // 12: coinbase.staking.orchestration.v1.Workflow.state:type_name -> coinbase.staking.orchestration.v1.Workflow.State
	10, // 13: coinbase.staking.orchestration.v1.Workflow.steps:type_name -> coinbase.staking.orchestration.v1.WorkflowStep
	20, // 14: coinbase.staking.orchestration.v1.Workflow.create_time:type_name -> google.protobuf.Timestamp
	20, // 15: coinbase.staking.orchestration.v1.Workflow.update_time:type_name -> google.protobuf.Timestamp
	20, // 16: coinbase.staking.orchestration.v1.Workflow.complete_time:type_name -> google.protobuf.Timestamp
	11, // 17: coinbase.staking.orchestration.v1.CreateWorkflowRequest.workflow:type_name -> coinbase.staking.orchestration.v1.Workflow
	11, // 18: coinbase.staking.orchestration.v1.ListWorkflowsResponse.workflows:type_name -> coinbase.staking.orchestration.v1.Workflow
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_coinbase_staking_orchestration_v1_workflow_proto_init() }
func file_coinbase_staking_orchestration_v1_workflow_proto_init() {
	if File_coinbase_staking_orchestration_v1_workflow_proto != nil {
		return
	}
	file_coinbase_staking_orchestration_v1_ethereum_proto_init()
	file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_init()
	file_coinbase_staking_orchestration_v1_solana_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxStepOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitStepOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionInfraStepOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTxStepOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformWorkflowStepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*WorkflowStep_TxStepOutput)(nil),
		(*WorkflowStep_WaitStepOutput)(nil),
		(*WorkflowStep_ProvisionInfraStepOutput)(nil),
		(*WorkflowStep_BulkTxStepOutput)(nil),
	}
	file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Workflow_SolanaStakingParameters)(nil),
		(*Workflow_EthereumKilnStakingParameters)(nil),
		(*Workflow_EthereumStakingParameters)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_staking_orchestration_v1_workflow_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_staking_orchestration_v1_workflow_proto_goTypes,
		DependencyIndexes: file_coinbase_staking_orchestration_v1_workflow_proto_depIdxs,
		EnumInfos:         file_coinbase_staking_orchestration_v1_workflow_proto_enumTypes,
		MessageInfos:      file_coinbase_staking_orchestration_v1_workflow_proto_msgTypes,
	}.Build()
	File_coinbase_staking_orchestration_v1_workflow_proto = out.File
	file_coinbase_staking_orchestration_v1_workflow_proto_rawDesc = nil
	file_coinbase_staking_orchestration_v1_workflow_proto_goTypes = nil
	file_coinbase_staking_orchestration_v1_workflow_proto_depIdxs = nil
}
