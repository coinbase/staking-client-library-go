// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: coinbase/staking/orchestration/v1/staking_context.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message for the ViewStakingContext request.
type ViewStakingContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address to fetch staking context for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The network to fetch staking context for.
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// The protocol specific parameters needed to fetch a staking context.
	//
	// Types that are assignable to StakingContextParameters:
	//
	//	*ViewStakingContextRequest_EthereumKilnStakingContextParameters
	//	*ViewStakingContextRequest_SolanaStakingContextParameters
	StakingContextParameters isViewStakingContextRequest_StakingContextParameters `protobuf_oneof:"staking_context_parameters"`
}

func (x *ViewStakingContextRequest) Reset() {
	*x = ViewStakingContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_staking_context_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewStakingContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewStakingContextRequest) ProtoMessage() {}

func (x *ViewStakingContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_staking_context_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewStakingContextRequest.ProtoReflect.Descriptor instead.
func (*ViewStakingContextRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_staking_context_proto_rawDescGZIP(), []int{0}
}

func (x *ViewStakingContextRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ViewStakingContextRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (m *ViewStakingContextRequest) GetStakingContextParameters() isViewStakingContextRequest_StakingContextParameters {
	if m != nil {
		return m.StakingContextParameters
	}
	return nil
}

func (x *ViewStakingContextRequest) GetEthereumKilnStakingContextParameters() *EthereumKilnStakingContextParameters {
	if x, ok := x.GetStakingContextParameters().(*ViewStakingContextRequest_EthereumKilnStakingContextParameters); ok {
		return x.EthereumKilnStakingContextParameters
	}
	return nil
}

func (x *ViewStakingContextRequest) GetSolanaStakingContextParameters() *SolanaStakingContextParameters {
	if x, ok := x.GetStakingContextParameters().(*ViewStakingContextRequest_SolanaStakingContextParameters); ok {
		return x.SolanaStakingContextParameters
	}
	return nil
}

type isViewStakingContextRequest_StakingContextParameters interface {
	isViewStakingContextRequest_StakingContextParameters()
}

type ViewStakingContextRequest_EthereumKilnStakingContextParameters struct {
	// EthereumKiln staking context parameters.
	EthereumKilnStakingContextParameters *EthereumKilnStakingContextParameters `protobuf:"bytes,3,opt,name=ethereum_kiln_staking_context_parameters,json=ethereumKilnStakingContextParameters,proto3,oneof"`
}

type ViewStakingContextRequest_SolanaStakingContextParameters struct {
	// Solana staking context parameters.
	SolanaStakingContextParameters *SolanaStakingContextParameters `protobuf:"bytes,4,opt,name=solana_staking_context_parameters,json=solanaStakingContextParameters,proto3,oneof"`
}

func (*ViewStakingContextRequest_EthereumKilnStakingContextParameters) isViewStakingContextRequest_StakingContextParameters() {
}

func (*ViewStakingContextRequest_SolanaStakingContextParameters) isViewStakingContextRequest_StakingContextParameters() {
}

// The response message for the ViewStakingContext request.
type ViewStakingContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address you are getting a staking context for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The protocol specific details of the staking context.
	//
	// Types that are assignable to StakingContextDetails:
	//
	//	*ViewStakingContextResponse_EthereumKilnStakingContextDetails
	//	*ViewStakingContextResponse_SolanaStakingContextDetails
	StakingContextDetails isViewStakingContextResponse_StakingContextDetails `protobuf_oneof:"staking_context_details"`
}

func (x *ViewStakingContextResponse) Reset() {
	*x = ViewStakingContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_staking_context_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewStakingContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewStakingContextResponse) ProtoMessage() {}

func (x *ViewStakingContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_staking_context_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewStakingContextResponse.ProtoReflect.Descriptor instead.
func (*ViewStakingContextResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_staking_context_proto_rawDescGZIP(), []int{1}
}

func (x *ViewStakingContextResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (m *ViewStakingContextResponse) GetStakingContextDetails() isViewStakingContextResponse_StakingContextDetails {
	if m != nil {
		return m.StakingContextDetails
	}
	return nil
}

func (x *ViewStakingContextResponse) GetEthereumKilnStakingContextDetails() *EthereumKilnStakingContextDetails {
	if x, ok := x.GetStakingContextDetails().(*ViewStakingContextResponse_EthereumKilnStakingContextDetails); ok {
		return x.EthereumKilnStakingContextDetails
	}
	return nil
}

func (x *ViewStakingContextResponse) GetSolanaStakingContextDetails() *SolanaStakingContextDetails {
	if x, ok := x.GetStakingContextDetails().(*ViewStakingContextResponse_SolanaStakingContextDetails); ok {
		return x.SolanaStakingContextDetails
	}
	return nil
}

type isViewStakingContextResponse_StakingContextDetails interface {
	isViewStakingContextResponse_StakingContextDetails()
}

type ViewStakingContextResponse_EthereumKilnStakingContextDetails struct {
	// EthereumKiln staking context details.
	EthereumKilnStakingContextDetails *EthereumKilnStakingContextDetails `protobuf:"bytes,2,opt,name=ethereum_kiln_staking_context_details,json=ethereumKilnStakingContextDetails,proto3,oneof"`
}

type ViewStakingContextResponse_SolanaStakingContextDetails struct {
	// Solana staking context details.
	SolanaStakingContextDetails *SolanaStakingContextDetails `protobuf:"bytes,3,opt,name=solana_staking_context_details,json=solanaStakingContextDetails,proto3,oneof"`
}

func (*ViewStakingContextResponse_EthereumKilnStakingContextDetails) isViewStakingContextResponse_StakingContextDetails() {
}

func (*ViewStakingContextResponse_SolanaStakingContextDetails) isViewStakingContextResponse_StakingContextDetails() {
}

var File_coinbase_staking_orchestration_v1_staking_context_proto protoreflect.FileDescriptor

var file_coinbase_staking_orchestration_v1_staking_context_proto_rawDesc = []byte{
	0x0a, 0x37, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x03, 0x0a, 0x19, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0xa6, 0x01, 0x0a, 0x28, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6b, 0x69,
	0x6c, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x4b, 0x69, 0x6c, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x48, 0x00, 0x52, 0x24, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c,
	0x6e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x21, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52,
	0x1e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42,
	0x1c, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x83, 0x03,
	0x0a, 0x1a, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x25,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x21, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x1e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_staking_orchestration_v1_staking_context_proto_rawDescOnce sync.Once
	file_coinbase_staking_orchestration_v1_staking_context_proto_rawDescData = file_coinbase_staking_orchestration_v1_staking_context_proto_rawDesc
)

func file_coinbase_staking_orchestration_v1_staking_context_proto_rawDescGZIP() []byte {
	file_coinbase_staking_orchestration_v1_staking_context_proto_rawDescOnce.Do(func() {
		file_coinbase_staking_orchestration_v1_staking_context_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_staking_orchestration_v1_staking_context_proto_rawDescData)
	})
	return file_coinbase_staking_orchestration_v1_staking_context_proto_rawDescData
}

var file_coinbase_staking_orchestration_v1_staking_context_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_coinbase_staking_orchestration_v1_staking_context_proto_goTypes = []interface{}{
	(*ViewStakingContextRequest)(nil),            // 0: coinbase.staking.orchestration.v1.ViewStakingContextRequest
	(*ViewStakingContextResponse)(nil),           // 1: coinbase.staking.orchestration.v1.ViewStakingContextResponse
	(*EthereumKilnStakingContextParameters)(nil), // 2: coinbase.staking.orchestration.v1.EthereumKilnStakingContextParameters
	(*SolanaStakingContextParameters)(nil),       // 3: coinbase.staking.orchestration.v1.SolanaStakingContextParameters
	(*EthereumKilnStakingContextDetails)(nil),    // 4: coinbase.staking.orchestration.v1.EthereumKilnStakingContextDetails
	(*SolanaStakingContextDetails)(nil),          // 5: coinbase.staking.orchestration.v1.SolanaStakingContextDetails
}
var file_coinbase_staking_orchestration_v1_staking_context_proto_depIdxs = []int32{
	2, // 0: coinbase.staking.orchestration.v1.ViewStakingContextRequest.ethereum_kiln_staking_context_parameters:type_name -> coinbase.staking.orchestration.v1.EthereumKilnStakingContextParameters
	3, // 1: coinbase.staking.orchestration.v1.ViewStakingContextRequest.solana_staking_context_parameters:type_name -> coinbase.staking.orchestration.v1.SolanaStakingContextParameters
	4, // 2: coinbase.staking.orchestration.v1.ViewStakingContextResponse.ethereum_kiln_staking_context_details:type_name -> coinbase.staking.orchestration.v1.EthereumKilnStakingContextDetails
	5, // 3: coinbase.staking.orchestration.v1.ViewStakingContextResponse.solana_staking_context_details:type_name -> coinbase.staking.orchestration.v1.SolanaStakingContextDetails
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_coinbase_staking_orchestration_v1_staking_context_proto_init() }
func file_coinbase_staking_orchestration_v1_staking_context_proto_init() {
	if File_coinbase_staking_orchestration_v1_staking_context_proto != nil {
		return
	}
	file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_init()
	file_coinbase_staking_orchestration_v1_solana_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coinbase_staking_orchestration_v1_staking_context_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewStakingContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_staking_context_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewStakingContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_staking_orchestration_v1_staking_context_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ViewStakingContextRequest_EthereumKilnStakingContextParameters)(nil),
		(*ViewStakingContextRequest_SolanaStakingContextParameters)(nil),
	}
	file_coinbase_staking_orchestration_v1_staking_context_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ViewStakingContextResponse_EthereumKilnStakingContextDetails)(nil),
		(*ViewStakingContextResponse_SolanaStakingContextDetails)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_staking_orchestration_v1_staking_context_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_staking_orchestration_v1_staking_context_proto_goTypes,
		DependencyIndexes: file_coinbase_staking_orchestration_v1_staking_context_proto_depIdxs,
		MessageInfos:      file_coinbase_staking_orchestration_v1_staking_context_proto_msgTypes,
	}.Build()
	File_coinbase_staking_orchestration_v1_staking_context_proto = out.File
	file_coinbase_staking_orchestration_v1_staking_context_proto_rawDesc = nil
	file_coinbase_staking_orchestration_v1_staking_context_proto_goTypes = nil
	file_coinbase_staking_orchestration_v1_staking_context_proto_depIdxs = nil
}
