// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: coinbase/staking/orchestration/v1/solana.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the different states a stake account balance can have.
// Used to check to see if stake is actively earning rewards or ready to be withdrawn.
type StakeAccount_BalanceState int32

const (
	// The balance is not known.
	StakeAccount_BALANCE_STATE_UNSPECIFIED StakeAccount_BalanceState = 0
	// The balance is not actively staking.
	StakeAccount_BALANCE_STATE_INACTIVE StakeAccount_BalanceState = 1
	// The balance is in a warm up period and will activate in the next epoch.
	StakeAccount_BALANCE_STATE_ACTIVATING StakeAccount_BalanceState = 2
	// The balance is actively staking and earning rewards.
	StakeAccount_BALANCE_STATE_ACTIVE StakeAccount_BalanceState = 3
	// The balance is in a cool down period and will be deactivated in the next epoch.
	StakeAccount_BALANCE_STATE_DEACTIVATING StakeAccount_BalanceState = 4
)

// Enum value maps for StakeAccount_BalanceState.
var (
	StakeAccount_BalanceState_name = map[int32]string{
		0: "BALANCE_STATE_UNSPECIFIED",
		1: "BALANCE_STATE_INACTIVE",
		2: "BALANCE_STATE_ACTIVATING",
		3: "BALANCE_STATE_ACTIVE",
		4: "BALANCE_STATE_DEACTIVATING",
	}
	StakeAccount_BalanceState_value = map[string]int32{
		"BALANCE_STATE_UNSPECIFIED":  0,
		"BALANCE_STATE_INACTIVE":     1,
		"BALANCE_STATE_ACTIVATING":   2,
		"BALANCE_STATE_ACTIVE":       3,
		"BALANCE_STATE_DEACTIVATING": 4,
	}
)

func (x StakeAccount_BalanceState) Enum() *StakeAccount_BalanceState {
	p := new(StakeAccount_BalanceState)
	*p = x
	return p
}

func (x StakeAccount_BalanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StakeAccount_BalanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_staking_orchestration_v1_solana_proto_enumTypes[0].Descriptor()
}

func (StakeAccount_BalanceState) Type() protoreflect.EnumType {
	return &file_coinbase_staking_orchestration_v1_solana_proto_enumTypes[0]
}

func (x StakeAccount_BalanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StakeAccount_BalanceState.Descriptor instead.
func (StakeAccount_BalanceState) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_solana_proto_rawDescGZIP(), []int{6, 0}
}

// A prioritization fee that can be added to a Solana transaction.
type PriorityFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of compute units a transaction is allowed to consume.
	ComputeUnitLimit int64 `protobuf:"varint,1,opt,name=compute_unit_limit,json=computeUnitLimit,proto3" json:"compute_unit_limit,omitempty"`
	// The price to pay per compute unit.
	UnitPrice int64 `protobuf:"varint,2,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
}

func (x *PriorityFee) Reset() {
	*x = PriorityFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityFee) ProtoMessage() {}

func (x *PriorityFee) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityFee.ProtoReflect.Descriptor instead.
func (*PriorityFee) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_solana_proto_rawDescGZIP(), []int{0}
}

func (x *PriorityFee) GetComputeUnitLimit() int64 {
	if x != nil {
		return x.ComputeUnitLimit
	}
	return 0
}

func (x *PriorityFee) GetUnitPrice() int64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

// The parameters required to perform a stake operation on Solana.
type SolanaStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address where the funds are coming from to stake.
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	// The address of the validator.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// The amount of Solana to stake in lamports. (1 lamport = 0.000000001 SOL)
	Amount *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The option to set a priority fee for the transaction.
	PriorityFee *PriorityFee `protobuf:"bytes,4,opt,name=priority_fee,json=priorityFee,proto3" json:"priority_fee,omitempty"`
}

func (x *SolanaStakeParameters) Reset() {
	*x = SolanaStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakeParameters) ProtoMessage() {}

func (x *SolanaStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakeParameters.ProtoReflect.Descriptor instead.
func (*SolanaStakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_solana_proto_rawDescGZIP(), []int{1}
}

func (x *SolanaStakeParameters) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *SolanaStakeParameters) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *SolanaStakeParameters) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SolanaStakeParameters) GetPriorityFee() *PriorityFee {
	if x != nil {
		return x.PriorityFee
	}
	return nil
}

// The parameters required to perform a unstake operation on Solana.
type SolanaUnstakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address which is the signing authority to unstake.
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	// The address of the stake account to unstake from.
	StakeAccountAddress string `protobuf:"bytes,2,opt,name=stake_account_address,json=stakeAccountAddress,proto3" json:"stake_account_address,omitempty"`
	// The amount of Solana to unstake in lamports. (1 lamport = 0.000000001 SOL)
	Amount *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The option to set a priority fee for the transaction.
	PriorityFee *PriorityFee `protobuf:"bytes,4,opt,name=priority_fee,json=priorityFee,proto3" json:"priority_fee,omitempty"`
}

func (x *SolanaUnstakeParameters) Reset() {
	*x = SolanaUnstakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaUnstakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaUnstakeParameters) ProtoMessage() {}

func (x *SolanaUnstakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaUnstakeParameters.ProtoReflect.Descriptor instead.
func (*SolanaUnstakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_solana_proto_rawDescGZIP(), []int{2}
}

func (x *SolanaUnstakeParameters) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *SolanaUnstakeParameters) GetStakeAccountAddress() string {
	if x != nil {
		return x.StakeAccountAddress
	}
	return ""
}

func (x *SolanaUnstakeParameters) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SolanaUnstakeParameters) GetPriorityFee() *PriorityFee {
	if x != nil {
		return x.PriorityFee
	}
	return nil
}

// The parameters required to perform a claim stake operation on Solana.
type SolanaClaimStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address which is the signing authority to claim stake.
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	// The address of the stake account to claim stake from.
	StakeAccountAddress string `protobuf:"bytes,2,opt,name=stake_account_address,json=stakeAccountAddress,proto3" json:"stake_account_address,omitempty"`
	// The option to set a priority fee for the transaction.
	PriorityFee *PriorityFee `protobuf:"bytes,3,opt,name=priority_fee,json=priorityFee,proto3" json:"priority_fee,omitempty"`
}

func (x *SolanaClaimStakeParameters) Reset() {
	*x = SolanaClaimStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaClaimStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaClaimStakeParameters) ProtoMessage() {}

func (x *SolanaClaimStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaClaimStakeParameters.ProtoReflect.Descriptor instead.
func (*SolanaClaimStakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_solana_proto_rawDescGZIP(), []int{3}
}

func (x *SolanaClaimStakeParameters) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *SolanaClaimStakeParameters) GetStakeAccountAddress() string {
	if x != nil {
		return x.StakeAccountAddress
	}
	return ""
}

func (x *SolanaClaimStakeParameters) GetPriorityFee() *PriorityFee {
	if x != nil {
		return x.PriorityFee
	}
	return nil
}

// The protocol specific parameters required for fetching a staking context.
type SolanaStakingContextParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SolanaStakingContextParameters) Reset() {
	*x = SolanaStakingContextParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakingContextParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakingContextParameters) ProtoMessage() {}

func (x *SolanaStakingContextParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakingContextParameters.ProtoReflect.Descriptor instead.
func (*SolanaStakingContextParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_solana_proto_rawDescGZIP(), []int{4}
}

// The protocol specific details for a Solana staking context.
type SolanaStakingContextDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total balance of the main wallet address (system account).
	// Used to check the balance for any future staking or transaction to send.
	Balance *Amount `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// The current epoch that the Solana blockchain is in.
	// Used as a frame of reference for future stake activations and deactivations.
	CurrentEpoch int64 `protobuf:"varint,2,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	// How much of the epoch has passed as a percentage.
	// Used to inform how much time is left before a stake is activated or deactivated.
	EpochCompletionPercentage string `protobuf:"bytes,3,opt,name=epoch_completion_percentage,json=epochCompletionPercentage,proto3" json:"epoch_completion_percentage,omitempty"`
	// The list of staking accounts that are linked to the main wallet address (system account).
	// Used to check for statuses and balances of all stake accounts related to the main wallet address that
	// they're linked to.
	StakeAccounts []*StakeAccount `protobuf:"bytes,4,rep,name=stake_accounts,json=stakeAccounts,proto3" json:"stake_accounts,omitempty"`
}

func (x *SolanaStakingContextDetails) Reset() {
	*x = SolanaStakingContextDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakingContextDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakingContextDetails) ProtoMessage() {}

func (x *SolanaStakingContextDetails) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakingContextDetails.ProtoReflect.Descriptor instead.
func (*SolanaStakingContextDetails) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_solana_proto_rawDescGZIP(), []int{5}
}

func (x *SolanaStakingContextDetails) GetBalance() *Amount {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *SolanaStakingContextDetails) GetCurrentEpoch() int64 {
	if x != nil {
		return x.CurrentEpoch
	}
	return 0
}

func (x *SolanaStakingContextDetails) GetEpochCompletionPercentage() string {
	if x != nil {
		return x.EpochCompletionPercentage
	}
	return ""
}

func (x *SolanaStakingContextDetails) GetStakeAccounts() []*StakeAccount {
	if x != nil {
		return x.StakeAccounts
	}
	return nil
}

// The balance information for a stake account.
type StakeAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the stake account.
	// Used to hold the staked funds transferred over from the main wallet.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The bonded balance in lamports on the stake account (rent is not included in bonded amount).
	// Used to check the amount that is currently staked.
	BondedStake *Amount `protobuf:"bytes,2,opt,name=bonded_stake,json=bondedStake,proto3" json:"bonded_stake,omitempty"`
	// The rent amount for the stake account in lamports.
	// Used to highlight the amount used as the rent to maintain the address on the Solana blockchain.
	RentReserve *Amount `protobuf:"bytes,3,opt,name=rent_reserve,json=rentReserve,proto3" json:"rent_reserve,omitempty"`
	// The total balance on the address in lamports.
	// Used to check the total balance for the stake account.
	Balance *Amount `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
	// The balance state of the stake account.
	// Used to show what state the currently staked funds are in.
	BalanceState StakeAccount_BalanceState `protobuf:"varint,5,opt,name=balance_state,json=balanceState,proto3,enum=coinbase.staking.orchestration.v1.StakeAccount_BalanceState" json:"balance_state,omitempty"`
	// The validator (vote account) that the stake account is assigned to stake to.
	// Used to show where the staked funds are staked to.
	Validator string `protobuf:"bytes,6,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (x *StakeAccount) Reset() {
	*x = StakeAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccount) ProtoMessage() {}

func (x *StakeAccount) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccount.ProtoReflect.Descriptor instead.
func (*StakeAccount) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_solana_proto_rawDescGZIP(), []int{6}
}

func (x *StakeAccount) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *StakeAccount) GetBondedStake() *Amount {
	if x != nil {
		return x.BondedStake
	}
	return nil
}

func (x *StakeAccount) GetRentReserve() *Amount {
	if x != nil {
		return x.RentReserve
	}
	return nil
}

func (x *StakeAccount) GetBalance() *Amount {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *StakeAccount) GetBalanceState() StakeAccount_BalanceState {
	if x != nil {
		return x.BalanceState
	}
	return StakeAccount_BALANCE_STATE_UNSPECIFIED
}

func (x *StakeAccount) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

// The parameters needed for staking on Solana.
type SolanaStakingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameters:
	//
	//	*SolanaStakingParameters_StakeParameters
	//	*SolanaStakingParameters_UnstakeParameters
	//	*SolanaStakingParameters_ClaimStakeParameters
	Parameters isSolanaStakingParameters_Parameters `protobuf_oneof:"parameters"`
}

func (x *SolanaStakingParameters) Reset() {
	*x = SolanaStakingParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakingParameters) ProtoMessage() {}

func (x *SolanaStakingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakingParameters.ProtoReflect.Descriptor instead.
func (*SolanaStakingParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_solana_proto_rawDescGZIP(), []int{7}
}

func (m *SolanaStakingParameters) GetParameters() isSolanaStakingParameters_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *SolanaStakingParameters) GetStakeParameters() *SolanaStakeParameters {
	if x, ok := x.GetParameters().(*SolanaStakingParameters_StakeParameters); ok {
		return x.StakeParameters
	}
	return nil
}

func (x *SolanaStakingParameters) GetUnstakeParameters() *SolanaUnstakeParameters {
	if x, ok := x.GetParameters().(*SolanaStakingParameters_UnstakeParameters); ok {
		return x.UnstakeParameters
	}
	return nil
}

func (x *SolanaStakingParameters) GetClaimStakeParameters() *SolanaClaimStakeParameters {
	if x, ok := x.GetParameters().(*SolanaStakingParameters_ClaimStakeParameters); ok {
		return x.ClaimStakeParameters
	}
	return nil
}

type isSolanaStakingParameters_Parameters interface {
	isSolanaStakingParameters_Parameters()
}

type SolanaStakingParameters_StakeParameters struct {
	// The parameters for stake action on Solana.
	StakeParameters *SolanaStakeParameters `protobuf:"bytes,7,opt,name=stake_parameters,json=stakeParameters,proto3,oneof"`
}

type SolanaStakingParameters_UnstakeParameters struct {
	// The parameters for unstake action on Solana.
	UnstakeParameters *SolanaUnstakeParameters `protobuf:"bytes,8,opt,name=unstake_parameters,json=unstakeParameters,proto3,oneof"`
}

type SolanaStakingParameters_ClaimStakeParameters struct {
	// The parameters for claim stake action on Solana.
	ClaimStakeParameters *SolanaClaimStakeParameters `protobuf:"bytes,9,opt,name=claim_stake_parameters,json=claimStakeParameters,proto3,oneof"`
}

func (*SolanaStakingParameters_StakeParameters) isSolanaStakingParameters_Parameters() {}

func (*SolanaStakingParameters_UnstakeParameters) isSolanaStakingParameters_Parameters() {}

func (*SolanaStakingParameters_ClaimStakeParameters) isSolanaStakingParameters_Parameters() {}

var File_coinbase_staking_orchestration_v1_solana_proto protoreflect.FileDescriptor

var file_coinbase_staking_orchestration_v1_solana_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x21, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0xa2, 0x02, 0x0a, 0x15, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a, 0x2a, 0x18, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x3a, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x17, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x51, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x3a, 0x21, 0x92, 0x41, 0x1e, 0x0a, 0x1c, 0x2a, 0x1a, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x3a, 0x20, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x1a, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x51, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a, 0x20, 0x2a, 0x1e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x3a, 0x20, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x1e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x29, 0x92, 0x41, 0x26,
	0x0a, 0x24, 0x2a, 0x22, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x3a, 0x20, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x1b, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x56, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x21, 0x2a,
	0x1f, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x3a, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0xb3, 0x04, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x62,
	0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x6f,
	0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x0d,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22, 0xb7, 0x04, 0x0a, 0x17, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x65, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6b, 0x0a, 0x12, 0x75, 0x6e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x75, 0x0a, 0x16, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x21, 0x92,
	0x41, 0x1e, 0x0a, 0x1c, 0x2a, 0x1a, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x3a, 0x20, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x07, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x1b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x16, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x16, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x67,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_coinbase_staking_orchestration_v1_solana_proto_rawDescOnce sync.Once
	file_coinbase_staking_orchestration_v1_solana_proto_rawDescData = file_coinbase_staking_orchestration_v1_solana_proto_rawDesc
)

func file_coinbase_staking_orchestration_v1_solana_proto_rawDescGZIP() []byte {
	file_coinbase_staking_orchestration_v1_solana_proto_rawDescOnce.Do(func() {
		file_coinbase_staking_orchestration_v1_solana_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_staking_orchestration_v1_solana_proto_rawDescData)
	})
	return file_coinbase_staking_orchestration_v1_solana_proto_rawDescData
}

var file_coinbase_staking_orchestration_v1_solana_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_coinbase_staking_orchestration_v1_solana_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_coinbase_staking_orchestration_v1_solana_proto_goTypes = []interface{}{
	(StakeAccount_BalanceState)(0),         // 0: coinbase.staking.orchestration.v1.StakeAccount.BalanceState
	(*PriorityFee)(nil),                    // 1: coinbase.staking.orchestration.v1.PriorityFee
	(*SolanaStakeParameters)(nil),          // 2: coinbase.staking.orchestration.v1.SolanaStakeParameters
	(*SolanaUnstakeParameters)(nil),        // 3: coinbase.staking.orchestration.v1.SolanaUnstakeParameters
	(*SolanaClaimStakeParameters)(nil),     // 4: coinbase.staking.orchestration.v1.SolanaClaimStakeParameters
	(*SolanaStakingContextParameters)(nil), // 5: coinbase.staking.orchestration.v1.SolanaStakingContextParameters
	(*SolanaStakingContextDetails)(nil),    // 6: coinbase.staking.orchestration.v1.SolanaStakingContextDetails
	(*StakeAccount)(nil),                   // 7: coinbase.staking.orchestration.v1.StakeAccount
	(*SolanaStakingParameters)(nil),        // 8: coinbase.staking.orchestration.v1.SolanaStakingParameters
	(*Amount)(nil),                         // 9: coinbase.staking.orchestration.v1.Amount
}
var file_coinbase_staking_orchestration_v1_solana_proto_depIdxs = []int32{
	9,  // 0: coinbase.staking.orchestration.v1.SolanaStakeParameters.amount:type_name -> coinbase.staking.orchestration.v1.Amount
	1,  // 1: coinbase.staking.orchestration.v1.SolanaStakeParameters.priority_fee:type_name -> coinbase.staking.orchestration.v1.PriorityFee
	9,  // 2: coinbase.staking.orchestration.v1.SolanaUnstakeParameters.amount:type_name -> coinbase.staking.orchestration.v1.Amount
	1,  // 3: coinbase.staking.orchestration.v1.SolanaUnstakeParameters.priority_fee:type_name -> coinbase.staking.orchestration.v1.PriorityFee
	1,  // 4: coinbase.staking.orchestration.v1.SolanaClaimStakeParameters.priority_fee:type_name -> coinbase.staking.orchestration.v1.PriorityFee
	9,  // 5: coinbase.staking.orchestration.v1.SolanaStakingContextDetails.balance:type_name -> coinbase.staking.orchestration.v1.Amount
	7,  // 6: coinbase.staking.orchestration.v1.SolanaStakingContextDetails.stake_accounts:type_name -> coinbase.staking.orchestration.v1.StakeAccount
	9,  // 7: coinbase.staking.orchestration.v1.StakeAccount.bonded_stake:type_name -> coinbase.staking.orchestration.v1.Amount
	9,  // 8: coinbase.staking.orchestration.v1.StakeAccount.rent_reserve:type_name -> coinbase.staking.orchestration.v1.Amount
	9,  // 9: coinbase.staking.orchestration.v1.StakeAccount.balance:type_name -> coinbase.staking.orchestration.v1.Amount
	0,  // 10: coinbase.staking.orchestration.v1.StakeAccount.balance_state:type_name -> coinbase.staking.orchestration.v1.StakeAccount.BalanceState
	2,  // 11: coinbase.staking.orchestration.v1.SolanaStakingParameters.stake_parameters:type_name -> coinbase.staking.orchestration.v1.SolanaStakeParameters
	3,  // 12: coinbase.staking.orchestration.v1.SolanaStakingParameters.unstake_parameters:type_name -> coinbase.staking.orchestration.v1.SolanaUnstakeParameters
	4,  // 13: coinbase.staking.orchestration.v1.SolanaStakingParameters.claim_stake_parameters:type_name -> coinbase.staking.orchestration.v1.SolanaClaimStakeParameters
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_coinbase_staking_orchestration_v1_solana_proto_init() }
func file_coinbase_staking_orchestration_v1_solana_proto_init() {
	if File_coinbase_staking_orchestration_v1_solana_proto != nil {
		return
	}
	file_coinbase_staking_orchestration_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaUnstakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaClaimStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakingContextParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakingContextDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakingParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_staking_orchestration_v1_solana_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SolanaStakingParameters_StakeParameters)(nil),
		(*SolanaStakingParameters_UnstakeParameters)(nil),
		(*SolanaStakingParameters_ClaimStakeParameters)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_staking_orchestration_v1_solana_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_staking_orchestration_v1_solana_proto_goTypes,
		DependencyIndexes: file_coinbase_staking_orchestration_v1_solana_proto_depIdxs,
		EnumInfos:         file_coinbase_staking_orchestration_v1_solana_proto_enumTypes,
		MessageInfos:      file_coinbase_staking_orchestration_v1_solana_proto_msgTypes,
	}.Build()
	File_coinbase_staking_orchestration_v1_solana_proto = out.File
	file_coinbase_staking_orchestration_v1_solana_proto_rawDesc = nil
	file_coinbase_staking_orchestration_v1_solana_proto_goTypes = nil
	file_coinbase_staking_orchestration_v1_solana_proto_depIdxs = nil
}
