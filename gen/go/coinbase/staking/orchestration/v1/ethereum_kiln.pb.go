// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: coinbase/staking/orchestration/v1/ethereum_kiln.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The parameters required for the stake action on Ethereum Kiln.
type EthereumKilnStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address you wish to stake from.
	StakerAddress string `protobuf:"bytes,1,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
	// The address of the integrator contract.
	IntegratorContractAddress string `protobuf:"bytes,2,opt,name=integrator_contract_address,json=integratorContractAddress,proto3" json:"integrator_contract_address,omitempty"`
	// The amount of Ethereum to stake in wei.
	Amount *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EthereumKilnStakeParameters) Reset() {
	*x = EthereumKilnStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumKilnStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumKilnStakeParameters) ProtoMessage() {}

func (x *EthereumKilnStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumKilnStakeParameters.ProtoReflect.Descriptor instead.
func (*EthereumKilnStakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescGZIP(), []int{0}
}

func (x *EthereumKilnStakeParameters) GetStakerAddress() string {
	if x != nil {
		return x.StakerAddress
	}
	return ""
}

func (x *EthereumKilnStakeParameters) GetIntegratorContractAddress() string {
	if x != nil {
		return x.IntegratorContractAddress
	}
	return ""
}

func (x *EthereumKilnStakeParameters) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// The parameters required for the unstake action on Ethereum Kiln.
type EthereumKilnUnstakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address you wish to unstake from.
	StakerAddress string `protobuf:"bytes,1,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
	// The address of the integrator contract.
	IntegratorContractAddress string `protobuf:"bytes,2,opt,name=integrator_contract_address,json=integratorContractAddress,proto3" json:"integrator_contract_address,omitempty"`
	// The amount of Ethereum to unstake in wei.
	Amount *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EthereumKilnUnstakeParameters) Reset() {
	*x = EthereumKilnUnstakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumKilnUnstakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumKilnUnstakeParameters) ProtoMessage() {}

func (x *EthereumKilnUnstakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumKilnUnstakeParameters.ProtoReflect.Descriptor instead.
func (*EthereumKilnUnstakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescGZIP(), []int{1}
}

func (x *EthereumKilnUnstakeParameters) GetStakerAddress() string {
	if x != nil {
		return x.StakerAddress
	}
	return ""
}

func (x *EthereumKilnUnstakeParameters) GetIntegratorContractAddress() string {
	if x != nil {
		return x.IntegratorContractAddress
	}
	return ""
}

func (x *EthereumKilnUnstakeParameters) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// The parameters required for the claim stake action on Ethereum Kiln.
type EthereumKilnClaimStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address you wish to claim stake for.
	StakerAddress string `protobuf:"bytes,1,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
	// The address of the integrator contract
	IntegratorContractAddress string `protobuf:"bytes,2,opt,name=integrator_contract_address,json=integratorContractAddress,proto3" json:"integrator_contract_address,omitempty"`
}

func (x *EthereumKilnClaimStakeParameters) Reset() {
	*x = EthereumKilnClaimStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumKilnClaimStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumKilnClaimStakeParameters) ProtoMessage() {}

func (x *EthereumKilnClaimStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumKilnClaimStakeParameters.ProtoReflect.Descriptor instead.
func (*EthereumKilnClaimStakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescGZIP(), []int{2}
}

func (x *EthereumKilnClaimStakeParameters) GetStakerAddress() string {
	if x != nil {
		return x.StakerAddress
	}
	return ""
}

func (x *EthereumKilnClaimStakeParameters) GetIntegratorContractAddress() string {
	if x != nil {
		return x.IntegratorContractAddress
	}
	return ""
}

// The parameters needed for staking on Ethereum via Kiln.
type EthereumKilnStakingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameters:
	//
	//	*EthereumKilnStakingParameters_StakeParameters
	//	*EthereumKilnStakingParameters_UnstakeParameters
	//	*EthereumKilnStakingParameters_ClaimStakeParameters
	Parameters isEthereumKilnStakingParameters_Parameters `protobuf_oneof:"parameters"`
}

func (x *EthereumKilnStakingParameters) Reset() {
	*x = EthereumKilnStakingParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumKilnStakingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumKilnStakingParameters) ProtoMessage() {}

func (x *EthereumKilnStakingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumKilnStakingParameters.ProtoReflect.Descriptor instead.
func (*EthereumKilnStakingParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescGZIP(), []int{3}
}

func (m *EthereumKilnStakingParameters) GetParameters() isEthereumKilnStakingParameters_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *EthereumKilnStakingParameters) GetStakeParameters() *EthereumKilnStakeParameters {
	if x, ok := x.GetParameters().(*EthereumKilnStakingParameters_StakeParameters); ok {
		return x.StakeParameters
	}
	return nil
}

func (x *EthereumKilnStakingParameters) GetUnstakeParameters() *EthereumKilnUnstakeParameters {
	if x, ok := x.GetParameters().(*EthereumKilnStakingParameters_UnstakeParameters); ok {
		return x.UnstakeParameters
	}
	return nil
}

func (x *EthereumKilnStakingParameters) GetClaimStakeParameters() *EthereumKilnClaimStakeParameters {
	if x, ok := x.GetParameters().(*EthereumKilnStakingParameters_ClaimStakeParameters); ok {
		return x.ClaimStakeParameters
	}
	return nil
}

type isEthereumKilnStakingParameters_Parameters interface {
	isEthereumKilnStakingParameters_Parameters()
}

type EthereumKilnStakingParameters_StakeParameters struct {
	// The parameters for stake action on Ethereum Kiln.
	StakeParameters *EthereumKilnStakeParameters `protobuf:"bytes,1,opt,name=stake_parameters,json=stakeParameters,proto3,oneof"`
}

type EthereumKilnStakingParameters_UnstakeParameters struct {
	// The parameters for unstake action on Ethereum Kiln.
	UnstakeParameters *EthereumKilnUnstakeParameters `protobuf:"bytes,2,opt,name=unstake_parameters,json=unstakeParameters,proto3,oneof"`
}

type EthereumKilnStakingParameters_ClaimStakeParameters struct {
	// The parameters for claim stake action on Ethereum Kiln.
	ClaimStakeParameters *EthereumKilnClaimStakeParameters `protobuf:"bytes,4,opt,name=claim_stake_parameters,json=claimStakeParameters,proto3,oneof"`
}

func (*EthereumKilnStakingParameters_StakeParameters) isEthereumKilnStakingParameters_Parameters() {}

func (*EthereumKilnStakingParameters_UnstakeParameters) isEthereumKilnStakingParameters_Parameters() {
}

func (*EthereumKilnStakingParameters_ClaimStakeParameters) isEthereumKilnStakingParameters_Parameters() {
}

// The protocol specific parameters required for fetching a staking context.
type EthereumKilnStakingContextParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Integrator contract address.
	IntegratorContractAddress string `protobuf:"bytes,1,opt,name=integrator_contract_address,json=integratorContractAddress,proto3" json:"integrator_contract_address,omitempty"`
}

func (x *EthereumKilnStakingContextParameters) Reset() {
	*x = EthereumKilnStakingContextParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumKilnStakingContextParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumKilnStakingContextParameters) ProtoMessage() {}

func (x *EthereumKilnStakingContextParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumKilnStakingContextParameters.ProtoReflect.Descriptor instead.
func (*EthereumKilnStakingContextParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescGZIP(), []int{4}
}

func (x *EthereumKilnStakingContextParameters) GetIntegratorContractAddress() string {
	if x != nil {
		return x.IntegratorContractAddress
	}
	return ""
}

// The protocol specific details for an Ethereum Kiln staking context.
type EthereumKilnStakingContextDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Ethereum balance of the address.
	// This can be used to gate the stake action to make sure the requested stake amount
	// is less than ethereum_balance.
	EthereumBalance *Amount `protobuf:"bytes,1,opt,name=ethereum_balance,json=ethereumBalance,proto3" json:"ethereum_balance,omitempty"`
	// The number of integrator shares owned by the address.
	IntegratorShareBalance *Amount `protobuf:"bytes,2,opt,name=integrator_share_balance,json=integratorShareBalance,proto3" json:"integrator_share_balance,omitempty"`
	// The total Ethereum you can exchange for your integrator shares.
	// This can be used to gate the unstake action to make sure the requested unstake amount
	// is less than integrator_share_underlying_balance
	IntegratorShareUnderlyingBalance *Amount `protobuf:"bytes,3,opt,name=integrator_share_underlying_balance,json=integratorShareUnderlyingBalance,proto3" json:"integrator_share_underlying_balance,omitempty"`
	// The total amount of Ethereum you can redeem for all non-claimed vPool shares.
	// This along with the condition total_shares_pending_exit == fulfillable_share_count
	// can be used to gate the claim_stake action.
	TotalExitableEth *Amount `protobuf:"bytes,4,opt,name=total_exitable_eth,json=totalExitableEth,proto3" json:"total_exitable_eth,omitempty"`
	// The number of vPool shares are eligible to receive now or at a later point in time.
	TotalSharesPendingExit *Amount `protobuf:"bytes,5,opt,name=total_shares_pending_exit,json=totalSharesPendingExit,proto3" json:"total_shares_pending_exit,omitempty"`
	// The number of vPool shares you are able to claim now.
	FulfillableShareCount *Amount `protobuf:"bytes,6,opt,name=fulfillable_share_count,json=fulfillableShareCount,proto3" json:"fulfillable_share_count,omitempty"`
}

func (x *EthereumKilnStakingContextDetails) Reset() {
	*x = EthereumKilnStakingContextDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumKilnStakingContextDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumKilnStakingContextDetails) ProtoMessage() {}

func (x *EthereumKilnStakingContextDetails) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumKilnStakingContextDetails.ProtoReflect.Descriptor instead.
func (*EthereumKilnStakingContextDetails) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescGZIP(), []int{5}
}

func (x *EthereumKilnStakingContextDetails) GetEthereumBalance() *Amount {
	if x != nil {
		return x.EthereumBalance
	}
	return nil
}

func (x *EthereumKilnStakingContextDetails) GetIntegratorShareBalance() *Amount {
	if x != nil {
		return x.IntegratorShareBalance
	}
	return nil
}

func (x *EthereumKilnStakingContextDetails) GetIntegratorShareUnderlyingBalance() *Amount {
	if x != nil {
		return x.IntegratorShareUnderlyingBalance
	}
	return nil
}

func (x *EthereumKilnStakingContextDetails) GetTotalExitableEth() *Amount {
	if x != nil {
		return x.TotalExitableEth
	}
	return nil
}

func (x *EthereumKilnStakingContextDetails) GetTotalSharesPendingExit() *Amount {
	if x != nil {
		return x.TotalSharesPendingExit
	}
	return nil
}

func (x *EthereumKilnStakingContextDetails) GetFulfillableShareCount() *Amount {
	if x != nil {
		return x.FulfillableShareCount
	}
	return nil
}

var File_coinbase_staking_orchestration_v1_ethereum_kiln_proto protoreflect.FileDescriptor

var file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDesc = []byte{
	0x0a, 0x35, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6b, 0x69, 0x6c,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x01, 0x0a, 0x1b,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a, 0x20, 0x2a, 0x1e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x1d,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x55, 0x6e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x1b, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x27, 0x92, 0x41, 0x24, 0x0a, 0x22, 0x2a, 0x20, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x3a, 0x20, 0x55, 0x6e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0xc0, 0x01, 0x0a, 0x20, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x43, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x2b, 0x92, 0x41, 0x28, 0x0a, 0x26, 0x2a, 0x24, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x3a, 0x20, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0xb9, 0x03, 0x0a, 0x1d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b,
	0x69, 0x6c, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x71, 0x0a, 0x12, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x55, 0x6e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x11, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x7b, 0x0a, 0x16, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x3a, 0x27, 0x92, 0x41, 0x24, 0x0a, 0x22, 0x2a, 0x20, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x97,
	0x01, 0x0a, 0x24, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x28,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x3a, 0x20, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa8, 0x05, 0x0a, 0x21, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x54,
	0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x23, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x78, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x12, 0x64, 0x0a, 0x19,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x69, 0x74, 0x12, 0x61, 0x0a, 0x17, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x15,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a, 0x25, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x69, 0x6c, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescOnce sync.Once
	file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescData = file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDesc
)

func file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescGZIP() []byte {
	file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescOnce.Do(func() {
		file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescData)
	})
	return file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDescData
}

var file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_goTypes = []interface{}{
	(*EthereumKilnStakeParameters)(nil),          // 0: coinbase.staking.orchestration.v1.EthereumKilnStakeParameters
	(*EthereumKilnUnstakeParameters)(nil),        // 1: coinbase.staking.orchestration.v1.EthereumKilnUnstakeParameters
	(*EthereumKilnClaimStakeParameters)(nil),     // 2: coinbase.staking.orchestration.v1.EthereumKilnClaimStakeParameters
	(*EthereumKilnStakingParameters)(nil),        // 3: coinbase.staking.orchestration.v1.EthereumKilnStakingParameters
	(*EthereumKilnStakingContextParameters)(nil), // 4: coinbase.staking.orchestration.v1.EthereumKilnStakingContextParameters
	(*EthereumKilnStakingContextDetails)(nil),    // 5: coinbase.staking.orchestration.v1.EthereumKilnStakingContextDetails
	(*Amount)(nil), // 6: coinbase.staking.orchestration.v1.Amount
}
var file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_depIdxs = []int32{
	6,  // 0: coinbase.staking.orchestration.v1.EthereumKilnStakeParameters.amount:type_name -> coinbase.staking.orchestration.v1.Amount
	6,  // 1: coinbase.staking.orchestration.v1.EthereumKilnUnstakeParameters.amount:type_name -> coinbase.staking.orchestration.v1.Amount
	0,  // 2: coinbase.staking.orchestration.v1.EthereumKilnStakingParameters.stake_parameters:type_name -> coinbase.staking.orchestration.v1.EthereumKilnStakeParameters
	1,  // 3: coinbase.staking.orchestration.v1.EthereumKilnStakingParameters.unstake_parameters:type_name -> coinbase.staking.orchestration.v1.EthereumKilnUnstakeParameters
	2,  // 4: coinbase.staking.orchestration.v1.EthereumKilnStakingParameters.claim_stake_parameters:type_name -> coinbase.staking.orchestration.v1.EthereumKilnClaimStakeParameters
	6,  // 5: coinbase.staking.orchestration.v1.EthereumKilnStakingContextDetails.ethereum_balance:type_name -> coinbase.staking.orchestration.v1.Amount
	6,  // 6: coinbase.staking.orchestration.v1.EthereumKilnStakingContextDetails.integrator_share_balance:type_name -> coinbase.staking.orchestration.v1.Amount
	6,  // 7: coinbase.staking.orchestration.v1.EthereumKilnStakingContextDetails.integrator_share_underlying_balance:type_name -> coinbase.staking.orchestration.v1.Amount
	6,  // 8: coinbase.staking.orchestration.v1.EthereumKilnStakingContextDetails.total_exitable_eth:type_name -> coinbase.staking.orchestration.v1.Amount
	6,  // 9: coinbase.staking.orchestration.v1.EthereumKilnStakingContextDetails.total_shares_pending_exit:type_name -> coinbase.staking.orchestration.v1.Amount
	6,  // 10: coinbase.staking.orchestration.v1.EthereumKilnStakingContextDetails.fulfillable_share_count:type_name -> coinbase.staking.orchestration.v1.Amount
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_init() }
func file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_init() {
	if File_coinbase_staking_orchestration_v1_ethereum_kiln_proto != nil {
		return
	}
	file_coinbase_staking_orchestration_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumKilnStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumKilnUnstakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumKilnClaimStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumKilnStakingParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumKilnStakingContextParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumKilnStakingContextDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*EthereumKilnStakingParameters_StakeParameters)(nil),
		(*EthereumKilnStakingParameters_UnstakeParameters)(nil),
		(*EthereumKilnStakingParameters_ClaimStakeParameters)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_goTypes,
		DependencyIndexes: file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_depIdxs,
		MessageInfos:      file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_msgTypes,
	}.Build()
	File_coinbase_staking_orchestration_v1_ethereum_kiln_proto = out.File
	file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_rawDesc = nil
	file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_goTypes = nil
	file_coinbase_staking_orchestration_v1_ethereum_kiln_proto_depIdxs = nil
}
