// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: coinbase/staking/orchestration/v1/ethereum.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Parameters required for ethereum staking
type EthereumStakingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters used for staking - dependant on type
	//
	// Types that are assignable to Parameters:
	//
	//	*EthereumStakingParameters_NativeStakeParameters
	Parameters isEthereumStakingParameters_Parameters `protobuf_oneof:"parameters"`
}

func (x *EthereumStakingParameters) Reset() {
	*x = EthereumStakingParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_ethereum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumStakingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumStakingParameters) ProtoMessage() {}

func (x *EthereumStakingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_ethereum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumStakingParameters.ProtoReflect.Descriptor instead.
func (*EthereumStakingParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_ethereum_proto_rawDescGZIP(), []int{0}
}

func (m *EthereumStakingParameters) GetParameters() isEthereumStakingParameters_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *EthereumStakingParameters) GetNativeStakeParameters() *EthereumNativeStakeParameters {
	if x, ok := x.GetParameters().(*EthereumStakingParameters_NativeStakeParameters); ok {
		return x.NativeStakeParameters
	}
	return nil
}

type isEthereumStakingParameters_Parameters interface {
	isEthereumStakingParameters_Parameters()
}

type EthereumStakingParameters_NativeStakeParameters struct {
	// Native staking parameters
	NativeStakeParameters *EthereumNativeStakeParameters `protobuf:"bytes,2,opt,name=native_stake_parameters,json=nativeStakeParameters,proto3,oneof"`
}

func (*EthereumStakingParameters_NativeStakeParameters) isEthereumStakingParameters_Parameters() {}

// Parameters used for Native ethereum staking
type EthereumNativeStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethereum address used to withdrawal funds
	WithdrawalAddress string `protobuf:"bytes,1,opt,name=withdrawal_address,json=withdrawalAddress,proto3" json:"withdrawal_address,omitempty"`
	// Ethereum address used to accumulate fees
	FeeRecipient string `protobuf:"bytes,2,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"`
	// Amount of ETH to stake in increments of 32
	Amount *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EthereumNativeStakeParameters) Reset() {
	*x = EthereumNativeStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_orchestration_v1_ethereum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumNativeStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumNativeStakeParameters) ProtoMessage() {}

func (x *EthereumNativeStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_orchestration_v1_ethereum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumNativeStakeParameters.ProtoReflect.Descriptor instead.
func (*EthereumNativeStakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_orchestration_v1_ethereum_proto_rawDescGZIP(), []int{1}
}

func (x *EthereumNativeStakeParameters) GetWithdrawalAddress() string {
	if x != nil {
		return x.WithdrawalAddress
	}
	return ""
}

func (x *EthereumNativeStakeParameters) GetFeeRecipient() string {
	if x != nil {
		return x.FeeRecipient
	}
	return ""
}

func (x *EthereumNativeStakeParameters) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

var File_coinbase_staking_orchestration_v1_ethereum_proto protoreflect.FileDescriptor

var file_coinbase_staking_orchestration_v1_ethereum_proto_rawDesc = []byte{
	0x0a, 0x30, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x21, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x19, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x7a, 0x0a, 0x17, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x15, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x3a, 0x23, 0x92, 0x41, 0x20, 0x0a, 0x1e, 0x2a, 0x1c, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x3a, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x1d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x65, 0x65,
	0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x28, 0x92, 0x41, 0x25,
	0x0a, 0x23, 0x2a, 0x21, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x3a, 0x20, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_staking_orchestration_v1_ethereum_proto_rawDescOnce sync.Once
	file_coinbase_staking_orchestration_v1_ethereum_proto_rawDescData = file_coinbase_staking_orchestration_v1_ethereum_proto_rawDesc
)

func file_coinbase_staking_orchestration_v1_ethereum_proto_rawDescGZIP() []byte {
	file_coinbase_staking_orchestration_v1_ethereum_proto_rawDescOnce.Do(func() {
		file_coinbase_staking_orchestration_v1_ethereum_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_staking_orchestration_v1_ethereum_proto_rawDescData)
	})
	return file_coinbase_staking_orchestration_v1_ethereum_proto_rawDescData
}

var file_coinbase_staking_orchestration_v1_ethereum_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_coinbase_staking_orchestration_v1_ethereum_proto_goTypes = []interface{}{
	(*EthereumStakingParameters)(nil),     // 0: coinbase.staking.orchestration.v1.EthereumStakingParameters
	(*EthereumNativeStakeParameters)(nil), // 1: coinbase.staking.orchestration.v1.EthereumNativeStakeParameters
	(*Amount)(nil),                        // 2: coinbase.staking.orchestration.v1.Amount
}
var file_coinbase_staking_orchestration_v1_ethereum_proto_depIdxs = []int32{
	1, // 0: coinbase.staking.orchestration.v1.EthereumStakingParameters.native_stake_parameters:type_name -> coinbase.staking.orchestration.v1.EthereumNativeStakeParameters
	2, // 1: coinbase.staking.orchestration.v1.EthereumNativeStakeParameters.amount:type_name -> coinbase.staking.orchestration.v1.Amount
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_coinbase_staking_orchestration_v1_ethereum_proto_init() }
func file_coinbase_staking_orchestration_v1_ethereum_proto_init() {
	if File_coinbase_staking_orchestration_v1_ethereum_proto != nil {
		return
	}
	file_coinbase_staking_orchestration_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coinbase_staking_orchestration_v1_ethereum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumStakingParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_orchestration_v1_ethereum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumNativeStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_staking_orchestration_v1_ethereum_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EthereumStakingParameters_NativeStakeParameters)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_staking_orchestration_v1_ethereum_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_staking_orchestration_v1_ethereum_proto_goTypes,
		DependencyIndexes: file_coinbase_staking_orchestration_v1_ethereum_proto_depIdxs,
		MessageInfos:      file_coinbase_staking_orchestration_v1_ethereum_proto_msgTypes,
	}.Build()
	File_coinbase_staking_orchestration_v1_ethereum_proto = out.File
	file_coinbase_staking_orchestration_v1_ethereum_proto_rawDesc = nil
	file_coinbase_staking_orchestration_v1_ethereum_proto_goTypes = nil
	file_coinbase_staking_orchestration_v1_ethereum_proto_depIdxs = nil
}
