// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: coinbase/staking/rewards/v1/stake.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The participant type of a staking-related address.
type ParticipantType int32

const (
	// The participant type is unknown.
	ParticipantType_PARTICIPANT_TYPE_UNSPECIFIED ParticipantType = 0
	// Used when the onchain participant type is a delegator
	// (i.e. someone who delegates the responsibilities of validating blocks to another address in return for a share of the rewards).
	ParticipantType_DELEGATOR ParticipantType = 1
	// Used when the onchain participant type is a validator
	// (i.e. an address that is directly responsible for performing validation of blocks).
	ParticipantType_VALIDATOR ParticipantType = 2
)

// Enum value maps for ParticipantType.
var (
	ParticipantType_name = map[int32]string{
		0: "PARTICIPANT_TYPE_UNSPECIFIED",
		1: "DELEGATOR",
		2: "VALIDATOR",
	}
	ParticipantType_value = map[string]int32{
		"PARTICIPANT_TYPE_UNSPECIFIED": 0,
		"DELEGATOR":                    1,
		"VALIDATOR":                    2,
	}
)

func (x ParticipantType) Enum() *ParticipantType {
	p := new(ParticipantType)
	*p = x
	return p
}

func (x ParticipantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_staking_rewards_v1_stake_proto_enumTypes[0].Descriptor()
}

func (ParticipantType) Type() protoreflect.EnumType {
	return &file_coinbase_staking_rewards_v1_stake_proto_enumTypes[0]
}

func (x ParticipantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantType.Descriptor instead.
func (ParticipantType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_staking_rewards_v1_stake_proto_rawDescGZIP(), []int{0}
}

// Representing the different methods of calculating yield.
type RewardRate_CalculationMethods int32

const (
	// Calculation method is unknown or unspecified.
	RewardRate_CALCULATION_METHODS_UNSPECIFIED RewardRate_CalculationMethods = 0
	// A single Ethereum validator acting in isolation is currently not able to compound earned rewards because
	// Ethereum only allows validators to stake 32 ETH precisely.
	// This percentage yield is assuming that the rewards never compound, mimicking the behavior of a solo staker.
	RewardRate_SOLO_STAKER RewardRate_CalculationMethods = 1
	// A pool of Ethereum validators of sufficient size is able to compound rewards almost immediately.
	// This percentage yield is assuming rewards compound immediately, mimicking the behavior of a sufficiently large pool.
	RewardRate_POOLED_STAKER RewardRate_CalculationMethods = 2
	// A Solana delegator's staking rewards are staked (and therefore auto-compound) when rewards are paid out between epochs.
	// This percentage yield is assuming the rewards are auto-compounded on that schedule, mimicking a Solana delegator.
	RewardRate_EPOCH_AUTO_COMPOUNDING RewardRate_CalculationMethods = 3
	// A Solana validator's rewards accumulate in a separate account from the validator's active stake.
	// This percentage yield is assuming the rewards are not auto-compounded at any point, mimicking a Solana validator who never staked their rewards.
	RewardRate_NO_AUTO_COMPOUNDING RewardRate_CalculationMethods = 4
)

// Enum value maps for RewardRate_CalculationMethods.
var (
	RewardRate_CalculationMethods_name = map[int32]string{
		0: "CALCULATION_METHODS_UNSPECIFIED",
		1: "SOLO_STAKER",
		2: "POOLED_STAKER",
		3: "EPOCH_AUTO_COMPOUNDING",
		4: "NO_AUTO_COMPOUNDING",
	}
	RewardRate_CalculationMethods_value = map[string]int32{
		"CALCULATION_METHODS_UNSPECIFIED": 0,
		"SOLO_STAKER":                     1,
		"POOLED_STAKER":                   2,
		"EPOCH_AUTO_COMPOUNDING":          3,
		"NO_AUTO_COMPOUNDING":             4,
	}
)

func (x RewardRate_CalculationMethods) Enum() *RewardRate_CalculationMethods {
	p := new(RewardRate_CalculationMethods)
	*p = x
	return p
}

func (x RewardRate_CalculationMethods) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardRate_CalculationMethods) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_staking_rewards_v1_stake_proto_enumTypes[1].Descriptor()
}

func (RewardRate_CalculationMethods) Type() protoreflect.EnumType {
	return &file_coinbase_staking_rewards_v1_stake_proto_enumTypes[1]
}

func (x RewardRate_CalculationMethods) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardRate_CalculationMethods.Descriptor instead.
func (RewardRate_CalculationMethods) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_staking_rewards_v1_stake_proto_rawDescGZIP(), []int{1, 0}
}

// The representation of a staking balance at a particular point in time.
// (-- api-linter: core::0123::resource-name-field=disabled
//
//	aip.dev/not-precedent: Not including a 'name' field till our data sources support a unique identifier --)
type Stake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the staking balance.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The time at which this balance was evaluated.
	// Timestamps are in UTC, conforming to the RFC-3339 spec (e.g. 2023-11-13T19:38:36Z).
	EvaluationTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=evaluation_time,json=evaluationTime,proto3" json:"evaluation_time,omitempty"`
	// The total amount of stake that is actively earning rewards to this address.
	// Includes any delegated stake and self-stake.
	// For delegators, this would be only the amount delegated to a validator in most cases.
	// Only includes stake that is *actively contributing to rewards and can't be reduced
	// without affecting the rewards dynamics*.
	//
	// Pending inactive stake is included.
	// Pending active stake is not included.
	BondedStake *AssetAmount `protobuf:"bytes,4,opt,name=bonded_stake,json=bondedStake,proto3" json:"bonded_stake,omitempty"`
	// The amount of stake that this address receives from other addresses.
	// For most delegators, this will be 0.
	TotalDelegationReceived *AssetAmount `protobuf:"bytes,5,opt,name=total_delegation_received,json=totalDelegationReceived,proto3,oneof" json:"total_delegation_received,omitempty"`
	// The list of individual delegations this address has received from other addresses
	DelegationsReceived *Stake_Delegation `protobuf:"bytes,6,opt,name=delegations_received,json=delegationsReceived,proto3,oneof" json:"delegations_received,omitempty"`
	// The amount that this address stakes to another address.
	DelegationsGiven *Stake_Delegation `protobuf:"bytes,7,opt,name=delegations_given,json=delegationsGiven,proto3,oneof" json:"delegations_given,omitempty"`
	// An estimated yield of this address.
	RewardRateCalculations []*RewardRate `protobuf:"bytes,9,rep,name=reward_rate_calculations,json=rewardRateCalculations,proto3" json:"reward_rate_calculations,omitempty"`
	// The participant type at the time of evaluation (i.e. validator, delegator).
	ParticipantType ParticipantType `protobuf:"varint,10,opt,name=participant_type,json=participantType,proto3,enum=coinbase.staking.rewards.v1.ParticipantType" json:"participant_type,omitempty"`
	// The protocol on which this staking balance exists.
	Protocol string `protobuf:"bytes,12,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// The amount of stake that is not actively earning rewards to this address.
	// This amount includes any native token balance that is under the domain and control of the address in question,
	// but is not actively staked.
	//
	// Pending active stake would be included here.
	UnbondedBalance *AssetAmount `protobuf:"bytes,13,opt,name=unbonded_balance,json=unbondedBalance,proto3" json:"unbonded_balance,omitempty"`
}

func (x *Stake) Reset() {
	*x = Stake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_rewards_v1_stake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stake) ProtoMessage() {}

func (x *Stake) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_rewards_v1_stake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stake.ProtoReflect.Descriptor instead.
func (*Stake) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_rewards_v1_stake_proto_rawDescGZIP(), []int{0}
}

func (x *Stake) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Stake) GetEvaluationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EvaluationTime
	}
	return nil
}

func (x *Stake) GetBondedStake() *AssetAmount {
	if x != nil {
		return x.BondedStake
	}
	return nil
}

func (x *Stake) GetTotalDelegationReceived() *AssetAmount {
	if x != nil {
		return x.TotalDelegationReceived
	}
	return nil
}

func (x *Stake) GetDelegationsReceived() *Stake_Delegation {
	if x != nil {
		return x.DelegationsReceived
	}
	return nil
}

func (x *Stake) GetDelegationsGiven() *Stake_Delegation {
	if x != nil {
		return x.DelegationsGiven
	}
	return nil
}

func (x *Stake) GetRewardRateCalculations() []*RewardRate {
	if x != nil {
		return x.RewardRateCalculations
	}
	return nil
}

func (x *Stake) GetParticipantType() ParticipantType {
	if x != nil {
		return x.ParticipantType
	}
	return ParticipantType_PARTICIPANT_TYPE_UNSPECIFIED
}

func (x *Stake) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Stake) GetUnbondedBalance() *AssetAmount {
	if x != nil {
		return x.UnbondedBalance
	}
	return nil
}

// Reward yield calculation at a given point in time.
type RewardRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentage rate of rewards calculation. Will include two digits after the decimal (ex: 3.05).
	Percentage string `protobuf:"bytes,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// The time at which this yield calculation was calculated.
	// Timestamps are in UTC, conforming to the RFC-3339 spec (e.g. 2023-11-13T19:38:36Z).
	CalculatedTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=calculated_time,json=calculatedTime,proto3" json:"calculated_time,omitempty"`
	// The method used to calculate this yield. This could include information about which
	// rewards we're including in the calculation, how we're estimating the compounding period, etc.
	CalculationMethod RewardRate_CalculationMethods `protobuf:"varint,3,opt,name=calculation_method,json=calculationMethod,proto3,enum=coinbase.staking.rewards.v1.RewardRate_CalculationMethods" json:"calculation_method,omitempty"`
}

func (x *RewardRate) Reset() {
	*x = RewardRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_rewards_v1_stake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardRate) ProtoMessage() {}

func (x *RewardRate) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_rewards_v1_stake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardRate.ProtoReflect.Descriptor instead.
func (*RewardRate) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_rewards_v1_stake_proto_rawDescGZIP(), []int{1}
}

func (x *RewardRate) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

func (x *RewardRate) GetCalculatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CalculatedTime
	}
	return nil
}

func (x *RewardRate) GetCalculationMethod() RewardRate_CalculationMethods {
	if x != nil {
		return x.CalculationMethod
	}
	return RewardRate_CALCULATION_METHODS_UNSPECIFIED
}

// The request message for ListStakes.
type ListStakesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The protocol that the staking balance exists on.
	// The response will only include staking balances for the protocol specified here.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token as part of the response of a previous call.
	// Provide this to retrieve the next page.
	//
	// When paginating, all other parameters must match the previous
	// request to list resources.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// [AIP-160](https://google.aip.dev/160) format compliant filter. Supported protocols are 'ethereum', 'solana'.
	// Supplying other protocols will return an error.
	// * **Ethereum**:
	//   - Fields:
	//   - `address` - A ethereum validator public key.
	//   - `evaluation_time` - A timestamp in RFC-3339 format. Supports multiple comparisons (ex: '2024-01-01T00:00:00Z' and '2024-01-15T00:00:00Z').
	//   - Example(s):
	//   - `"address='0xac53512c39d0081ca4437c285305eb423f474e6153693c12fbba4a3df78bcaa3422b31d800c5bea71c1b017168a60474'"`
	//   - `"address='0xac53512c39d0081ca4437c285305eb423f474e6153693c12fbba4a3df78bcaa3422b31d800c5bea71c1b017168a60474' AND evaluation_time >= '2024-01-01T00:00:00Z' AND evaluation_time < '2024-01-15T00:00:00Z'"`
	//
	// * **Solana**:
	//   - Fields:
	//   - `address` - A solana staking address.
	//   - `evaluation_time` - A timestamp in RFC-3339 format. Supports multiple comparisons (ex: '2024-01-01T00:00:00Z' and '2024-01-15T00:00:00Z').
	//   - Example(s):
	//   - `"address='beefKGBWeSpHzYBHZXwp5So7wdQGX6mu4ZHCsH3uTar'"`
	//   - `"address='beefKGBWeSpHzYBHZXwp5So7wdQGX6mu4ZHCsH3uTar' AND evaluation_time >= '2024-01-01T00:00:00Z' AND evaluation_time < '2024-01-15T00:00:00Z'"`
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// The order in which to sort the results.
	// [AIP-132](https://google.aip.dev/132) compliant order_by field.
	// The default behavior, if not supplied, is 'evaluation_time desc'.
	// Example(s):
	// * 'evaluation_time desc', which returns Stakes starting with the most recent.
	// * 'evaluation_time asc', which returns Stakes starting with the oldest available.
	// * 'evaluation_time', which returns Stakes starting with the oldest available.
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListStakesRequest) Reset() {
	*x = ListStakesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_rewards_v1_stake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStakesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStakesRequest) ProtoMessage() {}

func (x *ListStakesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_rewards_v1_stake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStakesRequest.ProtoReflect.Descriptor instead.
func (*ListStakesRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_rewards_v1_stake_proto_rawDescGZIP(), []int{2}
}

func (x *ListStakesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListStakesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListStakesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListStakesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListStakesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// The response message for ListStakes.
type ListStakesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The staking balances returned in this response.
	Stakes []*Stake `protobuf:"bytes,1,rep,name=stakes,proto3" json:"stakes,omitempty"`
	// The page token the user must use in the next request if the next page is desired.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListStakesResponse) Reset() {
	*x = ListStakesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_rewards_v1_stake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStakesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStakesResponse) ProtoMessage() {}

func (x *ListStakesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_rewards_v1_stake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStakesResponse.ProtoReflect.Descriptor instead.
func (*ListStakesResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_rewards_v1_stake_proto_rawDescGZIP(), []int{3}
}

func (x *ListStakesResponse) GetStakes() []*Stake {
	if x != nil {
		return x.Stakes
	}
	return nil
}

func (x *ListStakesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A single delegation from one address to another.
type Stake_Delegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address associated to the delegation
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Amount of delegation received or given
	Amount *AssetAmount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Commission rate for delegation
	CommissionRate string `protobuf:"bytes,3,opt,name=commission_rate,json=commissionRate,proto3" json:"commission_rate,omitempty"`
}

func (x *Stake_Delegation) Reset() {
	*x = Stake_Delegation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_rewards_v1_stake_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stake_Delegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stake_Delegation) ProtoMessage() {}

func (x *Stake_Delegation) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_rewards_v1_stake_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stake_Delegation.ProtoReflect.Descriptor instead.
func (*Stake_Delegation) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_rewards_v1_stake_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Stake_Delegation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Stake_Delegation) GetAmount() *AssetAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Stake_Delegation) GetCommissionRate() string {
	if x != nil {
		return x.CommissionRate
	}
	return ""
}

var File_coinbase_staking_rewards_v1_stake_proto protoreflect.FileDescriptor

var file_coinbase_staking_rewards_v1_stake_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x28, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xae, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x64, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48,
	0x02, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x69,
	0x76, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x18, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x16, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c,
	0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x58, 0x0a,
	0x10, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x91, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x40, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x3a, 0x57, 0xea, 0x41, 0x54,
	0x0a, 0x1e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x2f, 0x7b, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x7d, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x32, 0x05, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08,
	0x0b, 0x10, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x80, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6e,
	0x0a, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x92,
	0x01, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f,
	0x4c, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x55, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x22, 0xd9, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x23, 0x0a, 0x21, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22,
	0x82, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x51, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c,
	0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_staking_rewards_v1_stake_proto_rawDescOnce sync.Once
	file_coinbase_staking_rewards_v1_stake_proto_rawDescData = file_coinbase_staking_rewards_v1_stake_proto_rawDesc
)

func file_coinbase_staking_rewards_v1_stake_proto_rawDescGZIP() []byte {
	file_coinbase_staking_rewards_v1_stake_proto_rawDescOnce.Do(func() {
		file_coinbase_staking_rewards_v1_stake_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_staking_rewards_v1_stake_proto_rawDescData)
	})
	return file_coinbase_staking_rewards_v1_stake_proto_rawDescData
}

var file_coinbase_staking_rewards_v1_stake_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_coinbase_staking_rewards_v1_stake_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_coinbase_staking_rewards_v1_stake_proto_goTypes = []interface{}{
	(ParticipantType)(0),               // 0: coinbase.staking.rewards.v1.ParticipantType
	(RewardRate_CalculationMethods)(0), // 1: coinbase.staking.rewards.v1.RewardRate.CalculationMethods
	(*Stake)(nil),                      // 2: coinbase.staking.rewards.v1.Stake
	(*RewardRate)(nil),                 // 3: coinbase.staking.rewards.v1.RewardRate
	(*ListStakesRequest)(nil),          // 4: coinbase.staking.rewards.v1.ListStakesRequest
	(*ListStakesResponse)(nil),         // 5: coinbase.staking.rewards.v1.ListStakesResponse
	(*Stake_Delegation)(nil),           // 6: coinbase.staking.rewards.v1.Stake.Delegation
	(*timestamppb.Timestamp)(nil),      // 7: google.protobuf.Timestamp
	(*AssetAmount)(nil),                // 8: coinbase.staking.rewards.v1.AssetAmount
}
var file_coinbase_staking_rewards_v1_stake_proto_depIdxs = []int32{
	7,  // 0: coinbase.staking.rewards.v1.Stake.evaluation_time:type_name -> google.protobuf.Timestamp
	8,  // 1: coinbase.staking.rewards.v1.Stake.bonded_stake:type_name -> coinbase.staking.rewards.v1.AssetAmount
	8,  // 2: coinbase.staking.rewards.v1.Stake.total_delegation_received:type_name -> coinbase.staking.rewards.v1.AssetAmount
	6,  // 3: coinbase.staking.rewards.v1.Stake.delegations_received:type_name -> coinbase.staking.rewards.v1.Stake.Delegation
	6,  // 4: coinbase.staking.rewards.v1.Stake.delegations_given:type_name -> coinbase.staking.rewards.v1.Stake.Delegation
	3,  // 5: coinbase.staking.rewards.v1.Stake.reward_rate_calculations:type_name -> coinbase.staking.rewards.v1.RewardRate
	0,  // 6: coinbase.staking.rewards.v1.Stake.participant_type:type_name -> coinbase.staking.rewards.v1.ParticipantType
	8,  // 7: coinbase.staking.rewards.v1.Stake.unbonded_balance:type_name -> coinbase.staking.rewards.v1.AssetAmount
	7,  // 8: coinbase.staking.rewards.v1.RewardRate.calculated_time:type_name -> google.protobuf.Timestamp
	1,  // 9: coinbase.staking.rewards.v1.RewardRate.calculation_method:type_name -> coinbase.staking.rewards.v1.RewardRate.CalculationMethods
	2,  // 10: coinbase.staking.rewards.v1.ListStakesResponse.stakes:type_name -> coinbase.staking.rewards.v1.Stake
	8,  // 11: coinbase.staking.rewards.v1.Stake.Delegation.amount:type_name -> coinbase.staking.rewards.v1.AssetAmount
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_coinbase_staking_rewards_v1_stake_proto_init() }
func file_coinbase_staking_rewards_v1_stake_proto_init() {
	if File_coinbase_staking_rewards_v1_stake_proto != nil {
		return
	}
	file_coinbase_staking_rewards_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coinbase_staking_rewards_v1_stake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_rewards_v1_stake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_rewards_v1_stake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStakesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_rewards_v1_stake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStakesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_rewards_v1_stake_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stake_Delegation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_staking_rewards_v1_stake_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_staking_rewards_v1_stake_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_staking_rewards_v1_stake_proto_goTypes,
		DependencyIndexes: file_coinbase_staking_rewards_v1_stake_proto_depIdxs,
		EnumInfos:         file_coinbase_staking_rewards_v1_stake_proto_enumTypes,
		MessageInfos:      file_coinbase_staking_rewards_v1_stake_proto_msgTypes,
	}.Build()
	File_coinbase_staking_rewards_v1_stake_proto = out.File
	file_coinbase_staking_rewards_v1_stake_proto_rawDesc = nil
	file_coinbase_staking_rewards_v1_stake_proto_goTypes = nil
	file_coinbase_staking_rewards_v1_stake_proto_depIdxs = nil
}
